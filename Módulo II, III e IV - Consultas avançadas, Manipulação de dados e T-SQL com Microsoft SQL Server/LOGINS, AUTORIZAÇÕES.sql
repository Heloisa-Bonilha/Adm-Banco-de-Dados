USE ESQUINA_VENDAS

-- AUTORIZAÇÃO DE ACESSO
CREATE LOGIN [SQLSERVER\GRUPO] FROM WINDOWS

CREATE LOGIN [NOME DO USUARIO] WITH PASSWORD = '1234'

CREATE LOGIN [NOME DO USUARIO] WITH PASSWORD = '1234',
CHECK_EXPIRATION = ON, CHECK_POLICY = ON

-- GERENCIAMENTO DE PROPRIEDADES DO LOGIN
master.sys.sql_logins

CREATE LOGIN HELO WITH PASSWORD = 'helo@1234'

-- INFORMAÇÕES DE LOGIN
SELECT * FROM SYS.SQL_LOGINS

-- SOMENTE USUÁRIOS ATIVOS
SELECT * FROM SYS.SQL_LOGINS
WHERE is_disabled <> 1

-- SERÁ DESABILITADA (VERSÃO ANTERIOR)
SELECT * FROM SYS.SYSLOGINS

SELECT * FROM SYS.SYSLOGINS SL
INNER JOIN SYS.SQL_LOGINS L
ON SL.sid = L.sid
WHERE L.is_disabled <> 1

-- RETORNA A DATA QUE A SENHA ATUAL FOI DEFINIDA
SELECT NAME, LOGINPROPERTY(NAME, 'PasswordLastSetTime') AS 'DATA QUE A SENHA ATUAL FOI DEFINIDA' FROM SYS.SQL_LOGINS

-- SEGURANÇA CRIPTOGRAFIA
-- SHA --> SECURE HASHING ALGORITHM
SELECT NAME, LOGINPROPERTY(NAME, 'PasswordHash') AS 'HASH' FROM SYS.SQL_LOGINS

-- TIPO DE CRIPTOGRAFIA HASH
-- 0 --> SQL7.0 HASH
-- 1 --> SHA-1 HASH
-- 2 --> SHA-2 HASH
-- NULL SE O LOGIN NÃO É UM LOGIN SQL SERVER VÁLIDO
SELECT NAME, LOGINPROPERTY(NAME, 'PasswordHashAlgorithm') AS 'TIPO HASH' FROM SYS.SQL_LOGINS


-- MOSTRANDO UM POUCO SOBRE AS CRIPTOGRAFIAS
DECLARE @TABELA_HASH TABLE (TIPO NVARCHAR(32))
INSERT INTO @TABELA_HASH (TIPO)
VALUES ('123'), ('TESTE_SENHA'), ('123@SENHA')
SELECT
HASHBYTES ('MD2', TIPO) AS 'MD2',
HASHBYTES ('SHA1', TIPO) AS 'SHA1',
HASHBYTES ('SHA2_256', TIPO) AS 'SHA2_256',
HASHBYTES ('SHA2_512', TIPO) AS 'SHA2_512'
FROM @TABELA_HASH

-- POLÍTICA INCORRETA DE SENHA
CREATE LOGIN TESTE WITH PASSWORD = 'TESTE'

SELECT name AS 'LOGIN' FROM SYS.SQL_LOGINS
WHERE PWDCOMPARE (name, password_hash) = 1

-- PWDCOMPARE = 1 | CORRESPONDENTE (IGUAL)
-- PWDCOMPARE = 0 | NÃO CORRESPONDE (DIFERENTE)

-- RETORNA O NUMERO DE DIAS QUE FALTAM PARA A SENHA EXPIRAR
SELECT name, LOGINPROPERTY(NAME, 'DaysUntilExpiration') FROM SYS.SQL_LOGINS

-- INDICA SE O LOGON ESTÁ BLOQUEADO
SELECT name, LOGINPROPERTY(NAME, 'IsLocked') FROM SYS.SQL_LOGINS

sp_helplogins 'TESTE'

-- AUTORIZAÇÕES : (FUNÇÕES DE SERVIDOR)
-- SYSADMIN
-- BULKADMIN
-- DISKADMIN
-- PROCESSADMIN
-- PUBLIC
-- SECURITYADMIN
-- SERVERADMIN
-- SETUPADMIN
-- DBCREATOR

ALTER SERVER ROLE [SYSADMIN] ADD MEMBER [NOME DO USUARIO]

ALTER SERVER ROLE [SYSADMIN] ADD MEMBER [DOMINIO\NOME DO USUARIO]

ALTER SERVER ROLE [SYSADMIN] DROP MEMBER [NOME DO USUARIO]

-- DEFININDO USUÁRIO TESTE COMO DBCREATOR (TESTAR LOGANDO COMO USUÁRIO TESTE E CRIE UM NOVO DB)
ALTER SERVER ROLE [DBCREATOR] ADD MEMBER [TESTE]

-- EXCLUINDO O USUÁRIO TESTE COMO DBCREATOR (TESTAR LOGANDO COMO USUÁRIO TESTE E CRIE [TENTE] UM NOVO DB)
ALTER SERVER ROLE [DBCREATOR] DROP MEMBER [TESTE]



-- PERMISSÕES E POSSÍVEIS APLICAÇÕES

-- TABELA DE PERMISSÕES E APLICAÇÕES
SELECT * FROM SYS.FN_BUILTIN_PERMISSIONS('')
WHERE CLASS_DESC = 'SERVER'

-----------------------------

USE ESQUINA_VENDAS
CREATE LOGIN FRANCISCO WITH PASSWORD = 'FRAN@123'

-- ASSOCIANDO O USUARIO AO LOGIN
CREATE USER FRANCISCO FOR LOGIN FRANCISCO

-- EXCLUINDO USUÁRIO
-- DROP USER FRANCISCO

-- COMO ADMINISTRADOR
USE ESQUINA_VENDAS

EXEC SP_ADDROLEMEMBER 'DB_DATAREADER' , 'FRANCISCO'

-- INFORMAÇÕES DO BANCO DE DADOS
SP_HELPDB ESQUINA_VENDAS

-- MUDANDO O DONO DAS BASES DE DADOS
-- MUDANDO A BASE
USE master
CREATE DATABASE DB_1

SP_HELPDB DB_1 -- VERIFICA O OWNER (ANTES)

ALTER AUTHORIZATION ON DATABASE :: DB_1 TO TESTE -- TESTE = LOGIN

SP_HELPDB DB_1 -- VERIFICA O OWNER (DEPOIS)

-- VERIFICAR O USUARIO ATUAL
USE DB_1
SELECT SYSTEM_USER

-- CONCEDENDO ACESSO AO USUARIO TESTE
CREATE USER TESTE FOR LOGIN TESTE
USE MASTER
GRANT SELECT TO TESTE --> USUÁRIO

-- TIRANDO O ACESSO (REVOGA)
REVOKE SELECT FROM TESTE

-- INFORMAÇÕES DE LOGINS
SELECT * FROM SYS.SQL_LOGINS
EXEC SP_HELPLOGINS
EXEC SP_HELPLOGINS 'TESTE'

-- VERIFICANDO AS PERMISSÕES
EXEC SP_HELPROTECT @USERNAME = 'TESTE'

-----------------------------------------

USE ESQUINA_VENDAS

CREATE LOGIN HELOISA WITH PASSWORD = 'HELO123'
CREATE USER HELOISA FOR LOGIN HELOISA

-- CONCEDENDO PERMISSÕES
GRANT SELECT, INSERT ON [TABELA DE VENDEDORES] TO HELOISA
GRANT ALTER ON [TABELA DE VENDEDORES] TO HELOISA
USE master
GRANT CONNECT SQL TO HELOISA
USE ESQUINA_VENDAS
--GRANT ALTER ON [ESQUINA_VENDAS] TO HELOISA (SERVER)
GRANT SELECT ON [TABELA DE CLIENTES](CPF, NOME) TO HELOISA
GRANT CREATE VIEW TO HELOISA
GRANT CREATE TABLE TO HELOISA
GRANT CREATE PROCEDURE TO HELOISA
GRANT CREATE FUNCTION TO HELOISA
GRANT EXECUTE ON [dbo].[CriarNotaFiscal] TO HELOISA --> PROCEDURE
GRANT SELECT ON [dbo].[FaturamentoPercentual] TO HELOISA --> FUNCTION
-- APLICANDO DE FORMA GERAL
GRANT SELECT TO HELOISA --> SELECT GERAL
GRANT INSERT TO HELOISA --> INSERT GERAL
GRANT UPDATE TO HELOISA --> UPDATE GERAL
GRANT DELETE TO HELOISA --> DELETE GERAL

-- REVOGANDO AS PERMISSÕES
REVOKE SELECT, INSERT ON [TABELA DE VENDEDORES] TO HELOISA
-- ... (TODAS AS REVOGAÇÕES QUE QUISER)

-- VERIFICANDO AS PERMISSÕES
EXEC SP_HELPROTECT @USERNAME = 'HELOISA'

EXEC SP_HELPROTECT 'TABELA DE VENDEDORES'
