CREATE DATABASE  [ESQUINA_VENDAS]

-------------------------------------------------
USE [ESQUINA_VENDAS]

CREATE TABLE [TABELA DE PRODUTOS](
    [CODIGO DO PRODUTO] [VARCHAR](10),
    [NOME DO PRODUTO][VARCHAR](50),
    [EMBALAGEM][VARCHAR](20),
    [TAMANHO][VARCHAR](10),
    [SABOR][VARCHAR](20),
    [PRECO DE LISTA][SMALLMONEY],
    
)

--------------------------------------------------

USE [ESQUINA_VENDAS]

CREATE TABLE [TABELA DE CLIENTES]
( [CPF] [VARCHAR] (11) ,
[NOME] [VARCHAR] (100) ,
[ENDERECO] [VARCHAR] (150) ,
[COMPLEMENTO] [VARCHAR] (150) ,
[BAIRRO] [VARCHAR] (50) ,
[CIDADE] [VARCHAR] (50) ,
[ESTADO] [VARCHAR] (2) ,
[CEP] [VARCHAR] (8) ,
[DATA DE NASCIMENTO] [DATE],
[IDADE] [SMALLINT],
[SEXO] [VARCHAR] (1) ,
[LIMITE DE CREDITO] [MONEY] ,
[VOLUME DE COMPRA] [FLOAT] ,
[PRIMEIRA COMPRA] [BIT] )

-------------------------------------------------

USE [ESQUINA_VENDAS]

CREATE TABLE [TABELA DE VENDEDORES]
( [MATRICULA] varchar(5),
[NOME] varchar(100),
[PERCENTUAL COMISSAO] float)

-------------------------------------------------




--------------------Inserts-----------------------

--INSERINDO REGISTROS NA TABELA DE VENDEDORES
USE [ESQUINA_VENDAS]


INSERT INTO [TABELA DE VENDEDORES]
([MATRICULA], [NOME], [PERCENTUAL COMISSAO])
VALUES
('00122','Joabe da Silva Freitas',0.10)

INSERT INTO [TABELA DE VENDEDORES]
([MATRICULA], [NOME], [PERCENTUAL COMISSAO])
VALUES
('00133','Marly dos Santos Gama',0.8)

INSERT INTO [TABELA DE VENDEDORES]
([MATRICULA], [NOME], [PERCENTUAL COMISSAO])
VALUES
('00144','Bruno César Brandão',0.5)

INSERT INTO [TABELA DE VENDEDORES]
([MATRICULA], [NOME], [PERCENTUAL COMISSAO])
VALUES
('00155','Roberta Martins',0.11)

INSERT INTO [TABELA DE VENDEDORES]
([MATRICULA], [NOME], [PERCENTUAL COMISSAO])
VALUES
('00166','Pericles Alves',0.07)

-------------------------------------------------------

--INSERINDO REGISTROS NA TABELA DE PRODUTOS

USE [ESQUINA_VENDAS]

INSERT INTO [TABELA DE PRODUTOS]
([CODIGO DO PRODUTO],[NOME DO PRODUTO],[EMBALAGEM],[TAMANHO],[SABOR], [PRECO DE LISTA])
  VALUES 
  ('1040107','Light - 350 ml - Melancia','Lata','350 ml','Melancia',4.56),
   ('1037797','Clean - 2 Litros - Laranja','PET','2 Litros','Laranja',16.01),
    ('1000889','Sabor da Montanha - 700 ml - Uva','Garrafa','700 ml','Uva',6.31),
     ('1004327','Videira do Campo - 1,5 Litros - Melancia','PET','1,5 Litros','Melancia',19.51),
      ('1088126','Linha Citros - 1 Litro - Limão','PET','1 Litro','Limão',7.00),
       ('544931','Frescor do Verão - 350 ml - Limão','Lata','350 ml','Limão',2.46),
        ('1078680','Frescor do Verão - 470 ml - Manga','Garrafa','470 ml','Manga',5.18)







--------------------------------------- Aula 5 – Chave Primária e manipulando outros tipos de dados -----------------------------------------


INSERT INTO [TABELA DE PRODUTOS]([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA])
VALUES('788975', 'Pedaços de Frutas - 1,5 Litros - Maça', 'PET', '1,5 Litros', 'Maça', 18.01)

INSERT INTO [TABELA DE PRODUTOS]([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA])
VALUES('788975', 'Pedaços de Frutas - 1,5 Litros - Maça', 'PET', '1,5 Litros', 'Maça', 18.01)



DROP TABLE [TABELA DE PRODUTOS]


CREATE TABLE [TABELA DE PRODUTOS](
    [CODIGO DO PRODUTO] [VARCHAR](10),
    [NOME DO PRODUTO][VARCHAR](50),
    [EMBALAGEM][VARCHAR](20),
    [TAMANHO][VARCHAR](10),
    [SABOR][VARCHAR](20),
    [PREÇO DE LISTA][SMALLMONEY],
    PRIMARY KEY  ([CODIGO DO PRODUTO])
    
)


--INSERINDO REGISTROS NA TABELA DE PRODUTOS

USE [ESQUINA_VENDAS]

INSERT INTO [TABELA DE PRODUTOS]
([CODIGO DO PRODUTO],[NOME DO PRODUTO],[EMBALAGEM],[TAMANHO],[SABOR], [PRECO DE LISTA])
  VALUES 
  ('1040107','Light - 350 ml - Melancia','Lata','350 ml','Melancia',4.56),
  ('1037797','Clean - 2 Litros - Laranja','PET','2 Litros','Laranja',16.01),
  ('1000889','Sabor da Montanha - 700 ml - Uva','Garrafa','700 ml','Uva',6.31),
  ('1004327','Videira do Campo - 1,5 Litros - Melancia','PET','1,5 Litros','Melancia',19.51),
  ('1088126','Linha Citros - 1 Litro - Limão','PET','1 Litro','Limão',7.00),
  ('544931','Frescor do Verão - 350 ml - Limão','Lata','350 ml','Limão',2.46),
  ('1078680','Frescor do Verão - 470 ml - Manga','Garrafa','470 ml','Manga',5.18)




INSERT INTO [TABELA DE PRODUTOS]([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PREÇO DE LISTA])
VALUES('788975', 'Pedaços de Frutas - 1,5 Litros - Maça', 'PET', '1,5 Litros', 'Maça', 18.01)

-------------------------------- DESAFIO 1 DA AULA 5 ----------------------------------------------------------

DROP TABLE [TABELA DE CLIENTES]

CREATE TABLE [TABELA DE CLIENTES]
( [CPF] [VARCHAR] (11) ,
[NOME] [VARCHAR] (100) ,
[ENDERECO] [VARCHAR] (150) ,
[COMPLEMENTO] [VARCHAR] (150) ,
[BAIRRO] [VARCHAR] (50) ,
[CIDADE] [VARCHAR] (50) ,
[ESTADO] [VARCHAR] (2) ,
[CEP] [VARCHAR] (8) ,
[DATA DE NASCIMENTO] [DATE],
[IDADE] [SMALLINT],
[SEXO] [VARCHAR] (1) ,
[LIMITE DE CREDITO] [MONEY] ,
[VOLUME DE COMPRA] [FLOAT] ,
[PRIMEIRA COMPRA] [BIT],
PRIMARY KEY ([CPF])
)



---------------- DESAFIO 2 (MASTER) DA AULA 5 -------------------------------------

DROP TABLE [TABELA DE VENDEDORES]



CREATE TABLE [TABELA DE VENDEDORES]
( [MATRICULA] [VARCHAR](5),
[NOME] [VARCHAR](100),
[PERCENTUAL COMISSAO] [FLOAT],
[DATA DE ADMISSAO][DATE],
[FERIAS][BIT]
PRIMARY KEY ([MATRICULA])
)


INSERT INTO [TABELA DE VENDEDORES]
([MATRICULA], [NOME], [PERCENTUAL COMISSAO],[DATA DE ADMISSAO],[FERIAS])
VALUES
('00133','Marly dos Santos Gama',0.08,'15/08/2014',0)

INSERT INTO [TABELA DE VENDEDORES]
([MATRICULA], [NOME], [PERCENTUAL COMISSAO],[DATA DE ADMISSAO],[FERIAS])
VALUES
('00144','Bruno César Brandão',0.05,'15/08/2016',1)

INSERT INTO [TABELA DE VENDEDORES]
([MATRICULA], [NOME], [PERCENTUAL COMISSAO],[DATA DE ADMISSAO],[FERIAS])
VALUES
('00155','Roberta Serra',0.11,'15/08/2018',0)

INSERT INTO [TABELA DE VENDEDORES]
([MATRICULA], [NOME], [PERCENTUAL COMISSAO],[DATA DE ADMISSAO],[FERIAS])
VALUES
('00166','Pericles Alves',0.11,'15/08/2019',1)



INSERT INTO [TABELA DE CLIENTES] 
(	[CPF],
	[NOME],
	[ENDERECO],
	[COMPLEMENTO],
	[BAIRRO],
	[CIDADE],
	[ESTADO],
	[CEP],
	[DATA DE NASCIMENTO],
	[IDADE],
	[SEXO],
	[LIMITE DE CREDITO],
	[VOLUME DE COMPRA],
	[PRIMEIRA COMPRA]) 
VALUES 
(	
	'51073366200',
	'Márcio Ladislau Freitas',
	'R. Dois de Fevereiro',
	'',
	'Água Santa',
	'Rio de Janeiro',
	'RJ',
	'22000000',
	--'2000-02-12',
	'12/31/2000',
	18,
	'M',
	100000,
	200000,
	1
)



  DELETE FROM [TABELA DE CLIENTES]
  WHERE [CPF] = '51073366200'



------------------------------------------------------Aula 06 ------------------------------------------------


USE [ESQUINA_VENDAS]

DROP TABLE [TABELA DE CLIENTES]

CREATE TABLE [TABELA DE CLIENTES](
	[CPF] [VARCHAR](11) ,
	[NOME] [VARCHAR](100) ,
	[ENDERECO] [VARCHAR](150) ,
	[COMPLEMENTO] [VARCHAR](150) ,
	[BAIRRO] [VARCHAR](50) ,
	[CIDADE] [VARCHAR](50) ,
	[ESTADO] [VARCHAR](2) ,
	[CEP] [VARCHAR](8) ,
	[DATA DE NASCIMENTO] [DATE] ,
	[IDADE] [SMALLINT ] ,
	[SEXO] [VARCHAR](1) ,
	[LIMITE DE CREDITO] [MONEY] ,
	[VOLUME DE COMPRA] [FLOAT] ,
	[PRIMEIRA COMPRA] [BIT] ,
 	PRIMARY KEY ([CPF])
)


INSERT INTO [TABELA DE CLIENTES] ([CPF],[NOME],[ENDERECO],[COMPLEMENTO],[BAIRRO],[CIDADE],[ESTADO],[CEP],[DATA DE NASCIMENTO],[IDADE],[SEXO],[LIMITE DE CREDITO],[VOLUME DE COMPRA],[PRIMEIRA COMPRA]) VALUES ('19290992743','Fernando Cavalcante','R. Dois de Fevereiro','','Água Santa','Rio de Janeiro','RJ','22000000','2000-02-12',18,'M',100000,200000,1)
INSERT INTO [TABELA DE CLIENTES] ([CPF],[NOME],[ENDERECO],[COMPLEMENTO],[BAIRRO],[CIDADE],[ESTADO],[CEP],[DATA DE NASCIMENTO],[IDADE],[SEXO],[LIMITE DE CREDITO],[VOLUME DE COMPRA],[PRIMEIRA COMPRA]) VALUES ('2600586709','César Teixeira','Rua Conde de Bonfim','','Tijuca','Rio de Janeiro','RJ','22020001','2000-03-12',18,'M',120000,220000,0)
INSERT INTO [TABELA DE CLIENTES] ([CPF],[NOME],[ENDERECO],[COMPLEMENTO],[BAIRRO],[CIDADE],[ESTADO],[CEP],[DATA DE NASCIMENTO],[IDADE],[SEXO],[LIMITE DE CREDITO],[VOLUME DE COMPRA],[PRIMEIRA COMPRA]) VALUES ('95939180787','Fábio Carvalho','R. dos Jacarandás da Península','','Barra da Tijuca','Rio de Janeiro','RJ','22002020','1992-01-05',16,'M',90000,180000,1)
INSERT INTO [TABELA DE CLIENTES] ([CPF],[NOME],[ENDERECO],[COMPLEMENTO],[BAIRRO],[CIDADE],[ESTADO],[CEP],[DATA DE NASCIMENTO],[IDADE],[SEXO],[LIMITE DE CREDITO],[VOLUME DE COMPRA],[PRIMEIRA COMPRA]) VALUES ('9283760794','Edson Meilelles','R. Pinto de Azevedo','','Cidade Nova','Rio de Janeiro','RJ','22002002','1995-10-07',22,'M',150000,250000,1)
INSERT INTO [TABELA DE CLIENTES] ([CPF],[NOME],[ENDERECO],[COMPLEMENTO],[BAIRRO],[CIDADE],[ESTADO],[CEP],[DATA DE NASCIMENTO],[IDADE],[SEXO],[LIMITE DE CREDITO],[VOLUME DE COMPRA],[PRIMEIRA COMPRA]) VALUES ('7771579779','Marcelo Mattos','R. Eduardo Luís Lopes','','Brás','São Paulo','SP','88202912','1992-03-25',25,'M',120000,200000,1)
INSERT INTO [TABELA DE CLIENTES] ([CPF],[NOME],[ENDERECO],[COMPLEMENTO],[BAIRRO],[CIDADE],[ESTADO],[CEP],[DATA DE NASCIMENTO],[IDADE],[SEXO],[LIMITE DE CREDITO],[VOLUME DE COMPRA],[PRIMEIRA COMPRA]) VALUES ('5576228758','Petra Oliveira','R. Benício de Abreu','','Lapa','São Paulo','SP','88192029','1995-11-14',22,'F',70000,160000,1)
INSERT INTO [TABELA DE CLIENTES] ([CPF],[NOME],[ENDERECO],[COMPLEMENTO],[BAIRRO],[CIDADE],[ESTADO],[CEP],[DATA DE NASCIMENTO],[IDADE],[SEXO],[LIMITE DE CREDITO],[VOLUME DE COMPRA],[PRIMEIRA COMPRA]) VALUES ('8502682733','Valdeci da Silva','R. Srg. Édison de Oliveira','','Jardins','São Paulo','SP','82122020','1995-10-07',22,'M',110000,190000,0)
INSERT INTO [TABELA DE CLIENTES] ([CPF],[NOME],[ENDERECO],[COMPLEMENTO],[BAIRRO],[CIDADE],[ESTADO],[CEP],[DATA DE NASCIMENTO],[IDADE],[SEXO],[LIMITE DE CREDITO],[VOLUME DE COMPRA],[PRIMEIRA COMPRA]) VALUES ('1471156710','Érica Carvalho','R. Iriquitia','','Jardins','São Paulo','SP','80012212','1990-09-01',27,'F',170000,245000,0)
INSERT INTO [TABELA DE CLIENTES] ([CPF],[NOME],[ENDERECO],[COMPLEMENTO],[BAIRRO],[CIDADE],[ESTADO],[CEP],[DATA DE NASCIMENTO],[IDADE],[SEXO],[LIMITE DE CREDITO],[VOLUME DE COMPRA],[PRIMEIRA COMPRA]) VALUES ('3623344710','Marcos Nougeuira','Av. Pastor Martin Luther King Junior','','Inhauma','Rio de Janeiro','RJ','22002012','1995-01-13',23,'M',110000,220000,1)
INSERT INTO [TABELA DE CLIENTES] ([CPF],[NOME],[ENDERECO],[COMPLEMENTO],[BAIRRO],[CIDADE],[ESTADO],[CEP],[DATA DE NASCIMENTO],[IDADE],[SEXO],[LIMITE DE CREDITO],[VOLUME DE COMPRA],[PRIMEIRA COMPRA]) VALUES ('50534475787','Abel Silva ','Rua Humaitá','','Humaitá','Rio de Janeiro','RJ','22000212','1995-09-11',22,'M',170000,260000,0)
INSERT INTO [TABELA DE CLIENTES] ([CPF],[NOME],[ENDERECO],[COMPLEMENTO],[BAIRRO],[CIDADE],[ESTADO],[CEP],[DATA DE NASCIMENTO],[IDADE],[SEXO],[LIMITE DE CREDITO],[VOLUME DE COMPRA],[PRIMEIRA COMPRA]) VALUES ('5840119709','Gabriel Araujo','R. Manuel de Oliveira','','Santo Amaro','São Paulo','SP','80010221','1985-03-16',32,'M',140000,210000,1)
INSERT INTO [TABELA DE CLIENTES] ([CPF],[NOME],[ENDERECO],[COMPLEMENTO],[BAIRRO],[CIDADE],[ESTADO],[CEP],[DATA DE NASCIMENTO],[IDADE],[SEXO],[LIMITE DE CREDITO],[VOLUME DE COMPRA],[PRIMEIRA COMPRA]) VALUES ('94387575700','Walber Lontra','R. Cel. Almeida','','Piedade','Rio de Janeiro','RJ','22000201','1989-06-20',28,'M',60000,120000,1)
INSERT INTO [TABELA DE CLIENTES] ([CPF],[NOME],[ENDERECO],[COMPLEMENTO],[BAIRRO],[CIDADE],[ESTADO],[CEP],[DATA DE NASCIMENTO],[IDADE],[SEXO],[LIMITE DE CREDITO],[VOLUME DE COMPRA],[PRIMEIRA COMPRA]) VALUES ('8719655770','Carlos Eduardo','Av. Gen. Guedes da Fontoura','','Jardins','São Paulo','SP','81192002','1983-12-20',34,'M',200000,240000,0)
INSERT INTO [TABELA DE CLIENTES] ([CPF],[NOME],[ENDERECO],[COMPLEMENTO],[BAIRRO],[CIDADE],[ESTADO],[CEP],[DATA DE NASCIMENTO],[IDADE],[SEXO],[LIMITE DE CREDITO],[VOLUME DE COMPRA],[PRIMEIRA COMPRA]) VALUES ('5648641702','Paulo César Mattos','Rua Hélio Beltrão','','Tijuca','Rio de Janeiro','RJ','21002020','1991-08-30',26,'M',120000,220000,0)
INSERT INTO [TABELA DE CLIENTES] ([CPF],[NOME],[ENDERECO],[COMPLEMENTO],[BAIRRO],[CIDADE],[ESTADO],[CEP],[DATA DE NASCIMENTO],[IDADE],[SEXO],[LIMITE DE CREDITO],[VOLUME DE COMPRA],[PRIMEIRA COMPRA]) VALUES ('492472718','Eduardo Jorge','R. Volta Grande','','Tijuca','Rio de Janeiro','RJ','22012002','1994-07-19',23,'M',75000,95000,1)

DROP TABLE [TABELA DE PRODUTOS]

CREATE TABLE [TABELA DE PRODUTOS](
	[CODIGO DO PRODUTO] [VARCHAR](10),
	[NOME DO PRODUTO] [VARCHAR](50),
	[EMBALAGEM] [VARCHAR](20),
	[TAMANHO] [VARCHAR](10),
	[SABOR] [VARCHAR](20),
	[PRECO DE LISTA] [SMALLMONEY],
	PRIMARY KEY ([CODIGO DO PRODUTO])
)


INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('1040107','Light - 350 ml - Melancia','Lata','350 ml','Melancia',4.555)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('1037797','Clean - 2 Litros - Laranja','PET','2 Litros','Laranja',16.008)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('1000889','Sabor da Montanha - 700 ml - Uva','Garrafa','700 ml','Uva',6.309)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('1004327','Videira do Campo - 1,5 Litros - Melancia','PET','1,5 Litros','Melancia',19.51)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('1088126','Linha Citros - 1 Litro - Limão','PET','1 Litro','Limão',7.004)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('544931','Frescor do Verão - 350 ml - Limão','Lata','350 ml','Limão',2.4595)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('1078680','Frescor do Verão - 470 ml - Manga','Garrafa','470 ml','Manga',5.1795)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('1042712','Linha Citros - 700 ml - Limão','Garrafa','700 ml','Limão',4.904)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('788975','Pedaços de Frutas - 1,5 Litros - Maça','PET','1,5 Litros','Maça',18.011)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('1002767','Videira do Campo - 700 ml - Cereja/Maça','Garrafa','700 ml','Cereja/Maça',8.41)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('231776','Festival de Sabores - 700 ml - Açai','Garrafa','700 ml','Açai',13.312)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('479745','Clean - 470 ml - Laranja','Garrafa','470 ml','Laranja',3.768)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('1051518','Frescor do Verão - 470 ml - Limão','Garrafa','470 ml','Limão',3.2995)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('1101035','Linha Refrescante - 1 Litro - Morango/Limão','PET','1 Litro','Morango/Limão',9.0105)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('229900','Pedaços de Frutas - 350 ml - Maça','Lata','350 ml','Maça',4.211)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('1086543','Linha Refrescante - 1 Litro - Manga','PET','1 Litro','Manga',11.0105)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('695594','Festival de Sabores - 1,5 Litros - Açai','PET','1,5 Litros','Açai',28.512)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('838819','Clean - 1,5 Litros - Laranja','PET','1,5 Litros','Laranja',12.008)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('326779','Linha Refrescante - 1,5 Litros - Manga','PET','1,5 Litros','Manga',16.5105)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('520380','Pedaços de Frutas - 1 Litro - Maça','PET','1 Litro','Maça',12.011)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('1041119','Linha Citros - 700 ml - Lima/Limão','Garrafa','700 ml','Lima/Limão',4.904)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('243083','Festival de Sabores - 1,5 Litros - Maracujá','PET','1,5 Litros','Maracujá',10.512)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('394479','Sabor da Montanha - 700 ml - Cereja','Garrafa','700 ml','Cereja',8.409)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('746596','Light - 1,5 Litros - Melancia','PET','1,5 Litros','Melancia',19.505)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('773912','Clean - 1 Litro - Laranja','PET','1 Litro','Laranja',8.008)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('826490','Linha Refrescante - 700 ml - Morango/Limão','Garrafa','700 ml','Morango/Limão',6.3105)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('723457','Festival de Sabores - 700 ml - Maracujá','Garrafa','700 ml','Maracujá',4.912)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('812829','Clean - 350 ml - Laranja','Lata','350 ml','Laranja',2.808)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('290478','Videira do Campo - 350 ml - Melancia','Lata','350 ml','Melancia',4.56)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('783663','Sabor da Montanha - 700 ml - Morango','Garrafa','700 ml','Morango',7.709)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('235653','Frescor do Verão - 350 ml - Manga','Lata','350 ml','Manga',3.8595)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('1002334','Linha Citros - 1 Litro - Lima/Limão','PET','1 Litro','Lima/Limão',7.004)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('1013793','Videira do Campo - 2 Litros - Cereja/Maça','PET','2 Litros','Cereja/Maça',24.01)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('1096818','Linha Refrescante - 700 ml - Manga','Garrafa','700 ml','Manga',7.7105)
INSERT INTO [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO], [NOME DO PRODUTO], [EMBALAGEM], [TAMANHO], [SABOR], [PRECO DE LISTA]) VALUES ('1022450','Festival de Sabores - 2 Litros - Açai','PET','2 Litros','Açai',38.012)



DROP TABLE [TABELA DE VENDEDORES]



CREATE TABLE [TABELA DE VENDEDORES]
( [MATRICULA] [VARCHAR](5),
[NOME] [VARCHAR](100),
[PERCENTUAL COMISSAO] [FLOAT],
[DATA DE ADMISSAO][DATE],
[FERIAS][BIT]
PRIMARY KEY ([MATRICULA])

)


INSERT INTO [TABELA DE VENDEDORES]
([MATRICULA], [NOME], [PERCENTUAL COMISSAO],[DATA DE ADMISSAO],[FERIAS])
VALUES
('00133','Marly dos Santos Gama',0.08,'15/08/2014',0)

INSERT INTO [TABELA DE VENDEDORES]
([MATRICULA], [NOME], [PERCENTUAL COMISSAO],[DATA DE ADMISSAO],[FERIAS])
VALUES
('00144','Bruno César Brandão',0.05,'15/08/2016',1)

INSERT INTO [TABELA DE VENDEDORES]
([MATRICULA], [NOME], [PERCENTUAL COMISSAO],[DATA DE ADMISSAO],[FERIAS])
VALUES
('00155','Roberta Serra',0.11,'15/08/2018',0)

INSERT INTO [TABELA DE VENDEDORES]
([MATRICULA], [NOME], [PERCENTUAL COMISSAO],[DATA DE ADMISSAO],[FERIAS])
VALUES
('00166','Pericles Alves',0.11,'15/08/2019',1)

--------------------FILTRANDO REGISTROS-------------------------

SELECT * FROM [TABELA DE PRODUTOS]

DELETE FROM [TABELA DE PRODUTOS] 
WHERE [CODIGO DO PRODUTO] = '1000889'



SELECT * FROM [TABELA DE PRODUTOS] 
WHERE [CODIGO DO PRODUTO] = '1000889'

SELECT * FROM [TABELA DE PRODUTOS] 
WHERE [SABOR] = 'Uva'

SELECT * FROM [TABELA DE PRODUTOS] 
WHERE [SABOR] = 'Limão'

DELETE FROM [TABELA DE PRODUTOS] 
WHERE [SABOR] = 'Limão'



---------------------- 1 DESAFIO DA AULA 6 --------------------------------------



SELECT [NOME], [MATRICULA] FROM [TABELA DE VENDEDORES]

SELECT [NOME DO PRODUTO] AS 'DESCRIÇÃO DO PRODUTO', [CODIGO DO PRODUTO] AS 'IDENTIFICADOR', [PRECO DE LISTA] AS 'PREÇO A PAGAR'
FROM [TABELA DE PRODUTOS]

SELECT TOP (7) [NOME],[CPF],[CIDADE] FROM [TABELA DE CLIENTES]

---------------------- 2 DESAFIO DA AULA 6 -------------------------------------

SELECT * FROM [TABELA DE VENDEDORES]
WHERE [NOME] = 'Roberta Serra'



------------------FILTRANDO REGISTROS MAIOR,MENOR,DIFERENTE----------------------


SELECT * FROM [TABELA DE PRODUTOS]

SELECT * FROM [TABELA DE PRODUTOS] WHERE EMBALAGEM = 'PET'

SELECT * FROM [TABELA DE PRODUTOS] WHERE [PREÇO DE LISTA] = 4.555

SELECT * FROM [TABELA DE PRODUTOS] WHERE [PREÇO DE LISTA] > 10

SELECT * FROM [TABELA DE PRODUTOS] WHERE [PREÇO DE LISTA] < 10

SELECT * FROM [TABELA DE PRODUTOS] WHERE [PREÇO DE LISTA] <= 4.555

SELECT * FROM [TABELA DE PRODUTOS] WHERE [PREÇO DE LISTA] >= 4.555

SELECT * FROM [TABELA DE PRODUTOS] WHERE EMBALAGEM <= 'Lata'

SELECT * FROM [TABELA DE PRODUTOS] WHERE EMBALAGEM <> 'Lata'

SELECT * FROM [TABELA DE PRODUTOS] WHERE [PREÇO DE LISTA] <> 4.555


------------------------- 3 DESAFIO DA AULA 6 -----------------------------------



SELECT * FROM [TABELA DE VENDEDORES] WHERE [PERCENTUAL COMISSAO] > 0.10



-----------------------FILTRANDO POR DATAS----------------------------------------

SELECT * FROM [TABELA DE CLIENTES]

SELECT * FROM [TABELA DE CLIENTES] WHERE [DATA DE NASCIMENTO] = '1995-09-11'

SELECT * FROM [TABELA DE CLIENTES] WHERE [DATA DE NASCIMENTO] >= '1995-09-11'

SELECT * FROM [TABELA DE CLIENTES] WHERE [DATA DE NASCIMENTO] <= '1995-09-11'

SELECT * FROM [TABELA DE CLIENTES]
WHERE [DATA DE NASCIMENTO] >= '1995-01-01' AND [DATA DE NASCIMENTO]<='1995-12-31'


SELECT * FROM [TABELA DE CLIENTES] WHERE YEAR([DATA DE NASCIMENTO]) = 1995 

SELECT * FROM [TABELA DE CLIENTES] WHERE YEAR([DATA DE NASCIMENTO]) < 1995 

SELECT * FROM [TABELA DE CLIENTES] WHERE MONTH([DATA DE NASCIMENTO]) = 12

SELECT * FROM [TABELA DE CLIENTES] WHERE DAY([DATA DE NASCIMENTO]) = 11


SELECT MONTH([DATA DE NASCIMENTO]) AS 'MES' FROM [TABELA DE CLIENTES]
WHERE YEAR ([DATA DE NASCIMENTO]) = 1995

SELECT [NOME] AS 'NOME DO CLIENTE',YEAR([DATA DE NASCIMENTO]) AS 'ANO' ,MONTH([DATA DE NASCIMENTO]) AS 'MES'  FROM [TABELA DE CLIENTES]
WHERE YEAR ([DATA DE NASCIMENTO]) = 1995

---------------------------AQUI PRA VOCÊS A CHAVE ESTRANGEIRA QUANDO FIZ O TESTE ------------------------------------------------------
 

CREATE TABLE TESTE
(
    [MATRICULA TESTE][VARCHAR] (10),
    [NOME TESTE][VARCHAR](255),
	[MARCA TESTE][VARCHAR](255),
	PRIMARY KEY ([MATRICULA TESTE]),
    
	[MATRICULA][VARCHAR](5) NOT NULL,
	FOREIGN KEY ([MATRICULA])  REFERENCES [TABELA DE VENDEDORES] ([MATRICULA])
	
)

-- NAO PODE INSERIR VALOR NULO PORQUE É CHAVE ESTRANGEIRA (APENAS TESTE)
INSERT INTO [TESTE] ([MATRICULA TESTE],[NOME TESTE],[MARCA TESTE])
VALUES ('0001','TESTE CARRO','TESTE MARCA')

-- AQUI FOI TESTADO UM VALOR DE MATRICULA QUE NÃO SE ENCONTRA NA TABELA DE VENDEDORES (APENAS TESTE)
INSERT INTO [TESTE] ([MATRICULA TESTE],[NOME TESTE],[MARCA TESTE],[MATRICULA])
VALUES ('0001','TESTE CARRO','TESTE MARCA','00199')

-- INSERINDO VALORES CORRETOS  :) (APENAS TESTE)---
INSERT INTO [TESTE] ([MATRICULA TESTE],[NOME TESTE],[MARCA TESTE],[MATRICULA])
VALUES ('0001','TESTE CARRO','TESTE MARCA','00166')

-------------------------------- DESAFIO MASTER   PARA CRIAR AS  RELAÇÕES DAS TABELAS DA AULA 6 ----------------------------------------

CREATE DATABASE [ESQUINA_VENDAS]

CREATE TABLE [TABELA DE CLIENTES](
	[CPF] [VARCHAR](11) ,
	[NOME] [VARCHAR](100) ,
	[ENDERECO] [VARCHAR](150) ,
	[COMPLEMENTO] [VARCHAR](150) ,
	[BAIRRO] [VARCHAR](50) ,
	[CIDADE] [VARCHAR](50) ,
	[ESTADO] [VARCHAR](2) ,
	[CEP] [VARCHAR](8) ,
	[DATA DE NASCIMENTO] [DATE] ,
	[IDADE] [SMALLINT ] ,
	[SEXO] [VARCHAR](1) ,
	[LIMITE DE CREDITO] [MONEY] ,
	[VOLUME DE COMPRA] [FLOAT] ,
	[PRIMEIRA COMPRA] [BIT] ,
 	PRIMARY KEY ([CPF])
)

CREATE TABLE [TABELA DE PRODUTOS](
	[CODIGO DO PRODUTO] [VARCHAR](10),
	[NOME DO PRODUTO] [VARCHAR](50),
	[EMBALAGEM] [VARCHAR](20),
	[TAMANHO] [VARCHAR](10),
	[SABOR] [VARCHAR](20),
	[PRECO DE LISTA] [SMALLMONEY],
	PRIMARY KEY ([CODIGO DO PRODUTO])
)

CREATE TABLE [TABELA DE VENDEDORES]
( [MATRICULA] [VARCHAR](5),
[NOME] [VARCHAR](100),
[PERCENTUAL COMISSAO] [FLOAT],
[DATA DE ADMISSAO][DATE],
[FERIAS][BIT]
PRIMARY KEY ([MATRICULA])

)


CREATE TABLE [TABELA DE NOTAS FISCAIS]
(
    [CPF] [VARCHAR] (11) NOT NULL,
    [MATRICULA] [VARCHAR](5) NOT NULL,
    [DATA] [DATE],
    [NUMERO][VARCHAR](6),
    [IMPOSTO][FLOAT],
    PRIMARY KEY ([NUMERO]),
    
	FOREIGN KEY ([CPF]) REFERENCES [TABELA DE CLIENTES] ([CPF]),

    FOREIGN KEY ([MATRICULA]) REFERENCES [TABELA DE VENDEDORES] ([MATRICULA])

)

CREATE TABLE [TABELA DE ITENS NOTAS FISCAIS]
(
    [NUMERO] [VARCHAR](6) NOT NULL,
    [CODIGO DO PRODUTO] [VARCHAR] (10) NOT NULL,
    [QUANTIDADE][INT],
    [PRECO][FLOAT],

	PRIMARY KEY([NUMERO],[CODIGO DO PRODUTO]),
    
    FOREIGN KEY ([NUMERO]) REFERENCES [TABELA DE NOTAS FISCAIS] ([NUMERO]),
    FOREIGN KEY ([CODIGO DO PRODUTO]) REFERENCES [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO])

)

----------------------------- AULA 7 - FILTRANDO AS CONSULTAS DE DADOS ---------------------------------


SELECT * FROM [TABELA DE PRODUTOS] 
WHERE [SABOR] = 'Manga' OR [TAMANHO] = '700 ml' 



SELECT * FROM [TABELA DE PRODUTOS] 
WHERE [SABOR] = 'Manga' AND [TAMANHO] = '700 ml' 




SELECT * FROM [TABELA DE PRODUTOS] 
WHERE NOT ([SABOR] = 'Manga' AND [TAMANHO] = '700 ml')




SELECT * FROM [TABELA DE PRODUTOS] 
WHERE NOT ([SABOR] = 'Manga' OR [TAMANHO] = '700 ml')




SELECT * FROM [TABELA DE PRODUTOS] 
WHERE [SABOR] = 'Manga' AND NOT ( [TAMANHO] = '700 ml')




SELECT * FROM [TABELA DE PRODUTOS] 
WHERE [SABOR] IN ('Manga', 'Laranja')



SELECT * FROM [TABELA DE PRODUTOS] 
WHERE [SABOR] = 'Manga' OR [SABOR] ='Laranja'




SELECT * FROM [TABELA DE PRODUTOS] 
WHERE [SABOR] NOT IN ('Manga', 'Laranja')



SELECT * FROM [TABELA DE PRODUTOS]
WHERE NOT ([SABOR] = 'Manga' OR [SABOR] ='Laranja')



SELECT * FROM [TABELA DE PRODUTOS] 
WHERE [SABOR] IN ('Manga', 'Laranja') AND [PRECO DE LISTA] > 10



SELECT * FROM [TABELA DE PRODUTOS] 
WHERE [SABOR] IN ('Manga', 'Laranja') AND [PRECO DE LISTA] BETWEEN 10 AND 13




SELECT * FROM [TABELA DE PRODUTOS] 
WHERE [SABOR] IN ('Manga', 'Laranja') AND [PRECO DE LISTA] >= 10 AND [PRECO DE LISTA] <= 13



------------------------------ DESAFIO DE VOCES DA AULA 7---------------------------------

SELECT *  FROM [TABELA DE ITENS NOTAS FISCAIS]
WHERE [QUANTIDADE] > 60 AND [PREÇO] <= 3

------------------------- USANDO O LIKE --------------------------------------------------

SELECT * FROM [TABELA DE PRODUTOS]

SELECT * FROM [TABELA DE PRODUTOS] 
WHERE [NOME DO PRODUTO] LIKE '%Litros%'

SELECT * FROM [TABELA DE PRODUTOS] 
WHERE [NOME DO PRODUTO] LIKE 'Litros%'

SELECT * FROM [TABELA DE PRODUTOS] 
WHERE [NOME DO PRODUTO] LIKE '%Litros%' AND [SABOR] = 'Laranja'



--------------------------------- FIM da aula 07 ----------------------------------------------------



------------------------ Aula 8  – Mudando a apresentação dos dados de uma consulta ---------------------------------- 


--Usando distinct para visualizar tabela

SELECT EMBALAGEM, TAMANHO FROM [TABELA DE PRODUTOS]

SELECT DISTINCT EMBALAGEM, TAMANHO FROM [TABELA DE PRODUTOS]

SELECT DISTINCT EMBALAGEM, TAMANHO FROM [TABELA DE PRODUTOS] 
WHERE[SABOR] = 'Laranja'

SELECT DISTINCT EMBALAGEM, TAMANHO, SABOR FROM [TABELA DE PRODUTOS]


-- ------------------------------------- Desafio 01 da aula 08 ---------------------------------------------------


SELECT DISTINCT BAIRRO FROM [TABELA DE CLIENTES]
WHERE CIDADE = 'Rio de Janeiro'

-------------------------------- Limitando a saída de consulta ---------------------------------------

SELECT * FROM [TABELA DE PRODUTOS]

SELECT TOP 3 * FROM [TABELA DE PRODUTOS]

SELECT * FROM [TABELA DE PRODUTOS] 
WHERE [SABOR] = 'Laranja'

SELECT TOP 3 * FROM [TABELA DE PRODUTOS] 
WHERE [SABOR] = 'Laranja'

SELECT EMBALAGEM, TAMANHO FROM [TABELA DE PRODUTOS]

SELECT DISTINCT EMBALAGEM, TAMANHO FROM [TABELA DE PRODUTOS]

SELECT DISTINCT TOP 3 EMBALAGEM, TAMANHO FROM [TABELA DE PRODUTOS]

----------------------------- Desafio 02 da Aula 08-------------------------------------------------- 

SELECT TOP 10 * FROM [TABELA DE NOTAS FISCAIS] 
WHERE [DATA] = '2017-01-01'


----------------------------- Ordenando a saída da consulta ----------------------------------------

SELECT * FROM [TABELA DE PRODUTOS]

SELECT * FROM [TABELA DE PRODUTOS] 
ORDER BY [PRECO DE LISTA]

SELECT * FROM [TABELA DE PRODUTOS] 
ORDER BY [PRECO DE LISTA] DESC

SELECT * FROM [TABELA DE PRODUTOS] 
ORDER BY [NOME DO PRODUTO]

SELECT [EMBALAGEM], [NOME DO PRODUTO] FROM [TABELA DE PRODUTOS] 
ORDER BY [EMBALAGEM], [NOME DO PRODUTO]

SELECT [EMBALAGEM], [NOME DO PRODUTO] FROM [TABELA DE PRODUTOS] 
ORDER BY [EMBALAGEM], [NOME DO PRODUTO] DESC


SELECT [EMBALAGEM], [NOME DO PRODUTO] FROM [TABELA DE PRODUTOS] 
ORDER BY [EMBALAGEM] DESC, [NOME DO PRODUTO] DESC


SELECT [EMBALAGEM], [NOME DO PRODUTO] FROM [TABELA DE PRODUTOS] 
ORDER BY [EMBALAGEM] DESC, [NOME DO PRODUTO] ASC


------------------------------- Desafio 03 da Aula 08 ------------------------------------------

SELECT * FROM [TABELA DE PRODUTOS] 
WHERE [NOME DO PRODUTO] = 'Linha Refrescante - 1 Litro - Morango/Limão'

SELECT * FROM [TABELA DE PRODUTOS] 
WHERE [NOME DO PRODUTO] LIKE '%Morango/Limão%'

SELECT * FROM [TABELA DE PRODUTOS] 
WHERE [NOME DO PRODUTO] LIKE '%Refrescante%'



SELECT * FROM [TABELA DE ITENS NOTAS FISCAIS]
WHERE [CODIGO DO PRODUTO] = '1101035'
ORDER BY QUANTIDADE DESC


---------------------------------- Agrupando os resultados ----------------------

SELECT * FROM [TABELA DE CLIENTES]

SELECT ESTADO,  [LIMITE DE CREDITO] FROM [TABELA DE CLIENTES]

SELECT ESTADO, SUM([LIMITE DE CREDITO]) FROM [TABELA DE CLIENTES] 
GROUP BY ESTADO

SELECT ESTADO, SUM([LIMITE DE CREDITO]) AS 'LIMITE DE CREDITO' FROM [TABELA DE CLIENTES] 
GROUP BY ESTADO


SELECT ESTADO, AVG([LIMITE DE CREDITO]) FROM [TABELA DE CLIENTES] 
GROUP BY ESTADO



SELECT ESTADO, AVG([LIMITE DE CREDITO]) AS 'MEDIA DO LIMITE DE CREDITO' FROM [TABELA DE CLIENTES] 
GROUP BY ESTADO





SELECT * FROM [TABELA DE PRODUTOS]


SELECT EMBALAGEM, MAX([PRECO DE LISTA]) FROM [TABELA DE PRODUTOS] 
GROUP BY EMBALAGEM

SELECT EMBALAGEM, MAX([PRECO DE LISTA]) AS 'VALOR MAIS CARO POR EMBALAGEM' FROM [TABELA DE PRODUTOS] 
GROUP BY EMBALAGEM



SELECT EMBALAGEM, MIN([PRECO DE LISTA]) FROM [TABELA DE PRODUTOS] 
GROUP BY EMBALAGEM

SELECT EMBALAGEM, COUNT(*) FROM [TABELA DE PRODUTOS] 
GROUP BY EMBALAGEM



SELECT [NOME DO PRODUTO], EMBALAGEM  FROM [TABELA DE PRODUTOS] 
ORDER BY EMBALAGEM






SELECT BAIRRO, SUM([LIMITE DE CREDITO]) FROM [TABELA DE CLIENTES] 
WHERE [ESTADO]  = 'SP' 
GROUP BY BAIRRO


SELECT BAIRRO, SUM([LIMITE DE CREDITO]) FROM [TABELA DE CLIENTES] 
WHERE [ESTADO]  = 'SP' 
GROUP BY BAIRRO ORDER BY BAIRRO DESC


SELECT BAIRRO, ESTADO, SUM([LIMITE DE CREDITO]) FROM [TABELA DE CLIENTES] 
WHERE [ESTADO]  = 'SP' 
GROUP BY BAIRRO, ESTADO


------------- DESAFIO 4 AULA 08 ----


SELECT * FROM [TABELA DE PRODUTOS] 
WHERE [NOME DO PRODUTO] LIKE '%Morango/Limão%'



SELECT * FROM [TABELA DE PRODUTOS] 
WHERE [NOME DO PRODUTO] = 'Linha Refrescante - 1 Litro - Morango/Limão'





SELECT * FROM [TABELA DE ITENS NOTAS FISCAIS]
WHERE [CODIGO DO PRODUTO] = '1101035'
ORDER BY QUANTIDADE DESC


SELECT [CODIGO DO PRODUTO], COUNT(*) AS 'QUANTIDADE VENDIDADE' FROM [TABELA DE ITENS NOTAS FISCAIS]
WHERE [CODIGO DO PRODUTO] = '1101035'
AND QUANTIDADE = 99
GROUP BY [CODIGO DO PRODUTO]


--------------------------------- FIM da aula 08 ----------------------------------------------------


------------ Aula 9 - Juntando tabelas e consultas -----------



-----------------------  Consultas com Having ------------------------------------------------------------------

SELECT BAIRRO, ESTADO, SUM([LIMITE DE CREDITO]) FROM [TABELA DE CLIENTES] 
WHERE [ESTADO]  = 'SP' 
GROUP BY BAIRRO, ESTADO




SELECT BAIRRO, ESTADO, SUM([LIMITE DE CREDITO]) AS 'SOMA DE LIMITES DE CREDITO' FROM [TABELA DE CLIENTES] 
WHERE [ESTADO]  = 'SP' 
GROUP BY BAIRRO, ESTADO
HAVING SUM([LIMITE DE CREDITO])>= 140000




SELECT * FROM [dbo].[TABELA DE CLIENTES]


SELECT ESTADO, SUM([LIMITE DE CREDITO]) 'SOMA LIMITE DE CREDITO' FROM [TABELA DE CLIENTES] 
GROUP BY ESTADO



SELECT ESTADO, SUM([LIMITE DE CREDITO]) FROM [TABELA DE CLIENTES] 
GROUP BY ESTADO 
HAVING SUM([LIMITE DE CREDITO]) >= 850000



SELECT EMBALAGEM, SUM([PRECO DE LISTA]), MAX([PRECO DE LISTA]), MIN([PRECO DE LISTA]) 
FROM [TABELA DE PRODUTOS] 
GROUP BY EMBALAGEM

SELECT EMBALAGEM, SUM([PRECO DE LISTA]) AS 'SOMA PREÇO', MAX([PRECO DE LISTA]) AS 'MAIOR PREÇO', MIN([PRECO DE LISTA]) AS 'MENOR PRECO' 
FROM [TABELA DE PRODUTOS] 
GROUP BY EMBALAGEM



SELECT EMBALAGEM, SUM([PRECO DE LISTA]) AS 'SOMA PREÇO', MAX([PRECO DE LISTA]) AS 'MAIOR PREÇO', MIN([PRECO DE LISTA]) AS 'MENOR PRECO' 
FROM [TABELA DE PRODUTOS] 
GROUP BY EMBALAGEM
HAVING  SUM([PRECO DE LISTA])<=80


SELECT EMBALAGEM, SUM([PRECO DE LISTA]) AS 'SOMA PREÇO', MAX([PRECO DE LISTA]) AS 'MAIOR PREÇO', MIN([PRECO DE LISTA]) AS 'MENOR PRECO' 
FROM [TABELA DE PRODUTOS] 
GROUP BY EMBALAGEM
HAVING SUM([PRECO DE LISTA]) <= 80 AND MAX([PRECO DE LISTA]) >= 6


---------------------- DESAFIO 1 AULA 09 ----------------------------------------------------

SELECT CPF, COUNT(*) AS 'QTD. DE COMPRAS' FROM  [TABELA DE NOTAS FISCAIS]
WHERE YEAR(DATA) = 2016 
GROUP BY CPF 
HAVING COUNT(*) > 2000

-- 3 CLIENTES

--------------------------------------- USANDO O CASE PARA CLASSIFICAR RESULTADOS ----------------------------------------



SELECT * FROM [TABELA DE PRODUTOS]

----------------------------------------------------------

SELECT [NOME DO PRODUTO],
	CASE 
		WHEN [PRECO DE LISTA] >= 12 THEN 'PRODUTO CARO'
		WHEN [PRECO DE LISTA] >= 7 AND [PRECO DE LISTA] < 12 THEN 'PRODUTO EM CONTA'
		ELSE 'PRODUTO BARATO' 
	END
FROM [TABELA DE PRODUTOS]

-------------------------------------------------------

SELECT [NOME DO PRODUTO],
	CASE 
		WHEN [PRECO DE LISTA] >= 12 THEN 'PRODUTO CARO'
		WHEN [PRECO DE LISTA] >= 7 AND [PRECO DE LISTA] < 12 THEN 'PRODUTO EM CONTA'
		ELSE 'PRODUTO BARATO' 
	END AS 'CLASSIFICÃO DO PRODUTO'
FROM [TABELA DE PRODUTOS]

---------------------------------------------------------

SELECT [NOME DO PRODUTO],[PRECO DE LISTA],
	CASE 
		WHEN [PRECO DE LISTA] >= 12 THEN 'PRODUTO CARO'
		WHEN [PRECO DE LISTA] >= 7 AND [PRECO DE LISTA] < 12 THEN 'PRODUTO EM CONTA'
		ELSE 'PRODUTO BARATO' 
	END AS 'CLASSIFICÃO DO PRODUTO'
FROM [TABELA DE PRODUTOS]

----------------------------------------------

SELECT [NOME DO PRODUTO],[PRECO DE LISTA],
	CASE 
		WHEN [PRECO DE LISTA] >= 12 THEN 'PRODUTO CARO'
		WHEN [PRECO DE LISTA] >= 7 AND [PRECO DE LISTA] < 12 THEN 'PRODUTO EM CONTA'
		ELSE 'PRODUTO BARATO' 
	END AS 'CLASSIFICÃO DO PRODUTO'
FROM [TABELA DE PRODUTOS]
ORDER BY [PRECO DE LISTA]

-----------------------------------

SELECT [NOME DO PRODUTO],
		CASE 
		WHEN [PRECO DE LISTA] >= 12 THEN 'PRODUTO CARO'
		WHEN [PRECO DE LISTA] >= 7 AND [PRECO DE LISTA] < 12 THEN 'PRODUTO EM CONTA'
		ELSE 'PRODUTO BARATO' 
		END, AVG([PRECO DE LISTA])

FROM [TABELA DE PRODUTOS]

GROUP BY 
[NOME DO PRODUTO],
CASE 
	WHEN [PRECO DE LISTA] >= 12 THEN 'PRODUTO CARO'
	WHEN [PRECO DE LISTA] >= 7 AND [PRECO DE LISTA] < 12 THEN 'PRODUTO EM CONTA'
	ELSE 'PRODUTO BARATO' 
END

-------------------------------------------------------

SELECT [NOME DO PRODUTO],
		CASE 
		WHEN [PRECO DE LISTA] >= 12 THEN 'PRODUTO CARO'
		WHEN [PRECO DE LISTA] >= 7 AND [PRECO DE LISTA] < 12 THEN 'PRODUTO EM CONTA'
		ELSE 'PRODUTO BARATO' 
		END AS 'CLASSIFICAÇÃO DO PRODUTO', AVG([PRECO DE LISTA]) AS 'MÉDIA'

FROM [TABELA DE PRODUTOS]

GROUP BY 
[NOME DO PRODUTO],
CASE 
	WHEN [PRECO DE LISTA] >= 12 THEN 'PRODUTO CARO'
	WHEN [PRECO DE LISTA] >= 7 AND [PRECO DE LISTA] < 12 THEN 'PRODUTO EM CONTA'
	ELSE 'PRODUTO BARATO' 
END 

------------------------------------------------------------

SELECT * FROM [TABELA DE NOTAS FISCAIS]


SELECT COUNT (*) FROM [TABELA DE NOTAS FISCAIS]


SELECT [DATA], COUNT (*) AS 'CONTAGEM' FROM [TABELA DE NOTAS FISCAIS]
GROUP BY [DATA]


SELECT YEAR(DATA) AS 'ANO', COUNT(*) AS 'CONTAGEM' FROM [TABELA DE NOTAS FISCAIS]
GROUP BY YEAR(DATA)

--------------------------------------------------------------

-------------------- DESAFIO 2 DA AULA 09 ----------------------------------------------

SELECT [NOME],
	CASE 
		WHEN YEAR([DATA DE NASCIMENTO]) < 1990 THEN 'Adulto'
		WHEN year([DATA DE NASCIMENTO]) between 1990 and 1995 then 'Jovem'
		ELSE 'Criança' 
	END AS 'CLASSIFICAÇÃO ETÁRIA'
FROM [TABELA DE CLIENTES]
 ----------------------------------------------------------

 ------------------INNER JOIN-----------------------------------------------


SELECT * FROM [TABELA DE VENDEDORES]


SELECT * FROM [TABELA DE NOTAS FISCAIS]


SELECT * FROM [TABELA DE VENDEDORES] 
INNER JOIN  [TABELA DE NOTAS FISCAIS]
ON [TABELA DE VENDEDORES].MATRICULA = [TABELA DE NOTAS FISCAIS].MATRICULA


SELECT * FROM [TABELA DE VENDEDORES] A
INNER JOIN [TABELA DE NOTAS FISCAIS] B 
ON A.MATRICULA = B.MATRICULA

 




SELECT [TABELA DE VENDEDORES].MATRICULA, [TABELA DE VENDEDORES].[NOME], COUNT(*) AS 'NOTA FISCAL POR VENDEDOR' FROM [TABELA DE VENDEDORES] 
INNER JOIN [TABELA DE NOTAS FISCAIS] 
ON [TABELA DE VENDEDORES].MATRICULA = [TABELA DE NOTAS FISCAIS].MATRICULA
GROUP BY [TABELA DE VENDEDORES].MATRICULA, [TABELA DE VENDEDORES].[NOME]


SELECT [TABELA DE VENDEDORES].MATRICULA, [TABELA DE VENDEDORES].[NOME], COUNT(*) AS 'NOTA FISCAL POR VENDEDOR' FROM [TABELA DE VENDEDORES] 
INNER JOIN [TABELA DE NOTAS FISCAIS] 
ON [TABELA DE VENDEDORES].MATRICULA = [TABELA DE NOTAS FISCAIS].MATRICULA
GROUP BY [TABELA DE VENDEDORES].MATRICULA, [TABELA DE VENDEDORES].[NOME]
ORDER BY  COUNT(*)


SELECT [TABELA DE VENDEDORES].MATRICULA, [TABELA DE VENDEDORES].[NOME], YEAR(DATA) AS 'DATA', 
COUNT(*) AS 'NOTA FISCAL POR VENDEDOR' FROM [TABELA DE VENDEDORES] INNER JOIN 
[TABELA DE NOTAS FISCAIS] ON [TABELA DE VENDEDORES].MATRICULA = [TABELA DE NOTAS FISCAIS].MATRICULA
GROUP BY [TABELA DE VENDEDORES].MATRICULA, [TABELA DE VENDEDORES].[NOME], YEAR(DATA)


SELECT [TABELA DE VENDEDORES].MATRICULA, [TABELA DE VENDEDORES].[NOME], YEAR(DATA) AS 'DATA', 
COUNT(*) AS 'NOTA FISCAL POR VENDEDOR' FROM [TABELA DE VENDEDORES] INNER JOIN 
[TABELA DE NOTAS FISCAIS] ON [TABELA DE VENDEDORES].MATRICULA = [TABELA DE NOTAS FISCAIS].MATRICULA
GROUP BY [TABELA DE VENDEDORES].MATRICULA, [TABELA DE VENDEDORES].[NOME], YEAR(DATA)
ORDER BY YEAR(DATA)

-------------------- ------DESAFIO 03 DA AULA 09 ---------------------------------------


SELECT YEAR(DATA) AS 'ANO', SUM (QUANTIDADE * [PREÇO]) AS 'FATURAMENTO'
FROM [TABELA DE NOTAS FISCAIS] NF 
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS] INF 
ON NF.NUMERO = INF.NUMERO
GROUP BY YEAR(DATA)

---------------------------- LEFT JOIN ----------------------------------------------



SELECT * FROM [TABELA DE CLIENTES] INNER JOIN 
[TABELA DE NOTAS FISCAIS] ON [TABELA DE CLIENTES].CPF = [TABELA DE NOTAS FISCAIS].CPF




SELECT [TABELA DE CLIENTES].[NOME], COUNT(*) AS 'QTD. DE NOTAS POR CLIENTE' FROM [TABELA DE CLIENTES] INNER JOIN 
[TABELA DE NOTAS FISCAIS]ON [TABELA DE CLIENTES].CPF = [TABELA DE NOTAS FISCAIS].CPF
GROUP BY [TABELA DE CLIENTES].[NOME]


SELECT * FROM [TABELA DE CLIENTES]




SELECT [TABELA DE CLIENTES].[NOME], COUNT(*) AS 'QTD. DE NOTAS POR CLIENTE' FROM [TABELA DE CLIENTES]
LEFT JOIN [TABELA DE NOTAS FISCAIS] 
ON [TABELA DE CLIENTES].CPF = [TABELA DE NOTAS FISCAIS].CPF
GROUP BY [TABELA DE CLIENTES].[NOME]



SELECT [TABELA DE CLIENTES].[CPF], [TABELA DE CLIENTES].[NOME], COUNT(*) FROM [TABELA DE CLIENTES]
LEFT JOIN [TABELA DE NOTAS FISCAIS]
ON [TABELA DE CLIENTES].CPF = [TABELA DE NOTAS FISCAIS].CPF
GROUP BY  [TABELA DE CLIENTES].[CPF], [TABELA DE CLIENTES].[NOME]


SELECT * FROM [TABELA DE NOTAS FISCAIS]
WHERE CPF = '95939180787'

-------------------------- UNION --------------------------------------------------------

SELECT DISTINCT BAIRRO AS 'BAIRRO CLIENTE' FROM [TABELA DE CLIENTES]

SELECT DISTINCT BAIRRO AS 'BAIRRO VENDEDORES' FROM [TABELA DE VENDEDORES]



SELECT  BAIRRO AS 'BAIRRO' FROM [TABELA DE CLIENTES]
UNION 
SELECT  BAIRRO AS 'BAIRRO' FROM [TABELA DE VENDEDORES]


SELECT  BAIRRO AS 'BAIRRO' FROM [TABELA DE CLIENTES]
UNION ALL
SELECT  BAIRRO AS 'BAIRRO' FROM [TABELA DE VENDEDORES]


SELECT  BAIRRO, [DATA DE NASCIMENTO] FROM [TABELA DE CLIENTES]
UNION ALL
SELECT  BAIRRO, NOME FROM [TABELA DE VENDEDORES]


SELECT  BAIRRO, NOME FROM [TABELA DE CLIENTES]
UNION ALL
SELECT  BAIRRO, NOME FROM [TABELA DE VENDEDORES]

--- um pouco de constantes ------
SELECT 'TESTE' AS 'COLUNA'

SELECT 1 AS 'TESTE'

SELECT 'TESTE' AS 'COLUNA', BAIRRO, NOME  FROM [TABELA DE CLIENTES]


SELECT BAIRRO, NOME, 'CLIENTE' AS 'CLIENTE/VENDEDOR' FROM [TABELA DE CLIENTES]
UNION ALL
SELECT  BAIRRO, NOME, 'VENDEDOR' FROM [TABELA DE VENDEDORES]
ORDER BY 3 DESC


------------- ----------SUBCONSULTAS ---------------------------------


SELECT NOME, BAIRRO FROM [TABELA DE CLIENTES]



SELECT BAIRRO FROM [TABELA DE VENDEDORES]



SELECT NOME, BAIRRO FROM [TABELA DE CLIENTES]
WHERE BAIRRO IN (SELECT BAIRRO FROM [TABELA DE VENDEDORES])



SELECT EMBALAGEM, MAX([PRECO DE LISTA]) AS 'PRECO MAXIMO POR EMBALAGEM' FROM [TABELA DE PRODUTOS]
GROUP BY EMBALAGEM



SELECT EMBALAGEM, MAX([PRECO DE LISTA]) AS 'PRECO MAXIMO POR EMBALAGEM' FROM [TABELA DE PRODUTOS]
GROUP BY EMBALAGEM
HAVING MAX([PRECO DE LISTA])<5


SELECT A.EMBALAGEM,A.[PRECO MAXIMO POR EMBALAGEM] FROM (SELECT EMBALAGEM, MAX([PRECO DE LISTA]) AS 'PRECO MAXIMO POR EMBALAGEM' FROM [TABELA DE PRODUTOS]
GROUP BY EMBALAGEM) A 
WHERE A.[PRECO MAXIMO POR EMBALAGEM]<=5


--------------------------Visão------------------------------------------

-- criamos essa view pelo assitente 
SELECT * FROM [VW_EMBALAGEM]




--CRIACAO POR SQL
CREATE VIEW VW_TESTE AS 
		
	SELECT EMBALAGEM, MAX([PRECO DE LISTA]) AS 'PRECO MAXIMO POR EMBALAGEM' 
	FROM [TABELA DE PRODUTOS]
	GROUP BY EMBALAGEM

--SELECT NA VIEW TESTE
SELECT * FROM VW_TESTE








--------------------------------------------- Aula 10 - Funções do SQL Server ----------------------------------




---------- Funções de String ------------------



-- LTRIM
SELECT LTRIM('      OLA') as 'CAMPO'

SELECT ('           OLA') as 'CAMPO'


--RTRIM
SELECT RTRIM ('OLA           ') AS 'CAMPO'



SELECT REPLACE (TRIM ('                         MARCIO LADISLAU'         ),' ','')


--CONCAT
SELECT CONCAT('OLA ','MUNDO') AS 'CAMPO'

SELECT 'OLA ' + 'MUNDO'


--LEFT
SELECT LEFT ('AVENIDA EDUARDO RIBEIRO',7) AS 'CAMPO'

--RIGHT
SELECT RIGHT ('AVENIDA EDUARDO RIBEIRO',7) AS 'CAMPO'

--LOWER
SELECT LOWER('AVENIDA EDUARDO RIBEIRO') AS 'CAMPO'

--UPPER
SELECT UPPER ('avenida eduardo ribeiro') AS 'CAMPO'

--REPLACE
SELECT REPLACE ('AVENIDA EDUARDO RIBEIRO','AVENIDA','RUA') AS 'CAMPO'

--SUBSTRING
SELECT SUBSTRING ('AVENIDA EDUARDO RIBEIRO',1,7) AS CAMPO

SELECT SUBSTRING ('AVENIDA EDUARDO RIBEIRO',9,7) AS CAMPO


--LEN
SELECT LEN ('AVENIDA EDUARDO RIBEIRO') AS 'CAMPO'



--TESTANDO NA TABELA
SELECT * FROM [TABELA DE CLIENTES]

SELECT CONCAT(NOME, ' (',CPF,')') AS 'CAMPO TESTE' FROM [TABELA DE CLIENTES]


-------------------- DESAFIO 01 DA AULA 10 ---------------

SELECT NOME, CONCAT([ENDERECO], ' ', BAIRRO, ' ', CIDADE, ' ', ESTADO) AS 'ENDERECO COMPLETO'
FROM [TABELA DE CLIENTES]


---------------FUNÇOES DE DATA ------------------------------------------------


SELECT SYSDATETIME()

SELECT SYSDATETIMEOFFSET()

SELECT SYSUTCDATETIME()

SELECT CURRENT_TIMESTAMP

SELECT GETDATE()

SELECT GETUTCDATE()


--ALGUMAS FUNÇÕES
SELECT DATENAME(YEAR,GETDATE())

SELECT DATENAME(MICROSECOND,GETDATE())

SELECT DATENAME(MINUTE,GETDATE())


SELECT DATENAME(MONTH,GETDATE())

SELECT DATENAME(WEEKDAY,GETDATE())

SELECT DATEPART(MONTH,GETDATE())

SELECT DAY(GETDATE())

SELECT YEAR(GETDATE())

SELECT DATEFROMPARTS(2020,5,24)

SELECT DATENAME(MONTH,DATEFROMPARTS(2020,5,1))

SELECT DATEDIFF(YEAR, DATEFROMPARTS(2019,9,1), GETDATE())

SELECT DATEADD(MONTH, 7, GETDATE())

SELECT ISDATE('2018-01-01')

SELECT ISDATE('2018-25-28')

SELECT * FROM [TABELA DE NOTAS FISCAIS] 

SELECT DATA, CONCAT(DATENAME(DAY,DATA),' de ',DATENAME(MONTH,DATA),' de ', DATENAME(YEAR,DATA)) AS 'DATA 2' FROM [TABELA DE NOTAS FISCAIS] 

----------------- DESAFIO 02 DA AULA  --------------------


--Crie uma consulta que mostre o nome e a idade dos clientes
SELECT NOME, DATEDIFF(YEAR, [DATA DE NASCIMENTO], GETDATE()) AS 'IDADE'
FROM [TABELA DE CLIENTES]


--------------------- FUNCOES NUMERICAS -----------------------------------------

SELECT CEILING(7.333223)

SELECT FLOOR(7.333223)

select 2 * rand()

SELECT 3* RAND()

SELECT ROUND(7.33323323, 2)

SELECT * FROM [TABELA DE ITENS NOTAS FISCAIS]

SELECT [QUANTIDADE], [PRECO], ROUND(([QUANTIDADE] * [PRECO]),1) FROM [TABELA DE ITENS NOTAS FISCAIS]


-- DESAFIO 03  DA AULA 10 ---------------------

SELECT YEAR(DATA) AS 'ANO', FLOOR(SUM(IMPOSTO * (QUANTIDADE * PRECO))) AS 'IMPOSTO PAGO' 
FROM [TABELA DE NOTAS FISCAIS] NF
INNER JOIN  [TABELA DE ITENS NOTAS FISCAIS]INF 
ON NF.NUMERO = INF.NUMERO
WHERE YEAR(DATA) = 2016
GROUP BY YEAR(DATA)




--------------------- CONVERSÃO DE DADOS --------------------------------------------

SELECT CONVERT(VARCHAR, GETDATE(), 101)

SELECT CONVERT(VARCHAR, GETDATE(), 113)

SELECT CONVERT(VARCHAR, GETDATE(), 130)

SELECT CONVERT(decimal(10,5), 193.57)

SELECT * FROM [TABELA DE PRODUTOS]


-- ERRO EXEMPLO
SELECT 'O preço do produto ' + [NOME DO PRODUTO] + ' é ' +  [PRECO DE LISTA] 
from [TABELA DE PRODUTOS]

SELECT 'O preço do produto ' + [NOME DO PRODUTO] + ' é ' +  CONVERT(VARCHAR, [PRECO DE LISTA])from [TABELA DE PRODUTOS]

SELECT CONCAT ('PRECO DE LISTA: ',[PRECO DE LISTA]) FROM [TABELA DE PRODUTOS]



-----------------------------------AULA 11 - RELATÓRIOS --------------------------

--PASSO 1: RELATORIO DE VENDAS VALIDAS

SELECT * FROM [TABELA DE CLIENTES]

SELECT * FROM [TABELA DE ITENS NOTAS FISCAIS]

SELECT * FROM [TABELA DE NOTAS FISCAIS]

--PASSO 2:  FACO A UNIAO DAS TABELAS QUE TEM OS VALORES QUE EU QUERO
SELECT * FROM [TABELA DE NOTAS FISCAIS] NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO


--PASSO 3:  PEGO SOMENTE OS CAMPOS QUE EU QUERO
SELECT NF.CPF, NF.DATA,INF.QUANTIDADE FROM [TABELA DE NOTAS FISCAIS] NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO


--PASSO 4: CONVERTENDO A DATA PARA STRING
SELECT NF.CPF, CONVERT (VARCHAR,NF.DATA,120) AS 'DATA',INF.QUANTIDADE FROM [TABELA DE NOTAS FISCAIS] NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO


--PASSO 5: USANDO SUBSTRING PARA PEGAR SOMENTE O ANO/MES
SELECT NF.CPF,SUBSTRING (CONVERT(VARCHAR,NF.DATA,120),1,7) AS 'ANO/MES',INF.QUANTIDADE FROM [TABELA DE NOTAS FISCAIS] NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO




--PASSO 6: AGRUPANDO PARA TER QUANTIDADE POR CPF E MÊS 
SELECT NF.CPF,SUBSTRING (CONVERT(VARCHAR,NF.DATA,120),1,7) AS 'ANO/MES', SUM (INF.QUANTIDADE) AS 'QUANTIDADE MES' FROM [TABELA DE NOTAS FISCAIS] NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
GROUP BY NF.CPF, SUBSTRING (CONVERT(VARCHAR,NF.DATA,120),1,7)



--PASSO 7: PEGAR O NOME E VOLUME DE COMPRA DA TABELA DE CLIENTE
SELECT TC.NOME,TC.[VOLUME DE COMPRA] FROM [TABELA DE CLIENTES]TC






--PASSO 8: FAZENDO SUBQUERY DA CONSULTA 
SELECT * FROM
(SELECT NF.CPF,SUBSTRING(CONVERT (VARCHAR,NF.[DATA],103),4,10) AS 'MES/ANO', SUM (INF.QUANTIDADE) AS 'QUANTIDADE MES' FROM [TABELA DE NOTAS FISCAIS]NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
GROUP BY  NF.CPF,SUBSTRING(CONVERT (VARCHAR,NF.[DATA],103),4,10))CQ


--PASSO 9: APLICANDO INNER JOIN COM A TABELA DE CLIENTES
SELECT * FROM
(SELECT NF.CPF,SUBSTRING(CONVERT (VARCHAR,NF.[DATA],103),4,10) AS 'MES/ANO', SUM (INF.QUANTIDADE) AS 'QUANTIDADE MES' FROM [TABELA DE NOTAS FISCAIS]NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
GROUP BY  NF.CPF,SUBSTRING(CONVERT (VARCHAR,NF.[DATA],103),4,10))CQ
INNER JOIN [TABELA DE CLIENTES]TC
ON TC.CPF = CQ.CPF


--PASSO 10: SELECIONADO SOMENTE AS COLUNAS NECESSARIAS
SELECT TC.NOME,CQ.[ANO/MES], CQ.[QUANTIDADE MES],TC.[VOLUME DE COMPRA]
FROM
(SELECT NF.CPF,SUBSTRING (CONVERT(VARCHAR,NF.DATA,120),1,7) AS 'ANO/MES', SUM (INF.QUANTIDADE) AS 'QUANTIDADE MES' FROM [TABELA DE NOTAS FISCAIS] NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
GROUP BY NF.CPF, SUBSTRING (CONVERT(VARCHAR,NF.DATA,120),1,7))CQ --
INNER JOIN [TABELA DE CLIENTES]TC
ON TC.CPF = CQ.CPF



--PASSO 11: ELA VAI SER OUTRA SUBQUERY
--OBSERVEM O APELIDO PESSOAL

SELECT * FROM
(SELECT TC.NOME,CQ.[ANO/MES], CQ.[QUANTIDADE MES],TC.[VOLUME DE COMPRA]
FROM
(SELECT NF.CPF,SUBSTRING (CONVERT(VARCHAR,NF.DATA,120),1,7) AS 'ANO/MES', SUM (INF.QUANTIDADE) AS 'QUANTIDADE MES' FROM [TABELA DE NOTAS FISCAIS] NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
GROUP BY NF.CPF, SUBSTRING (CONVERT(VARCHAR,NF.DATA,120),1,7))CQ --
INNER JOIN [TABELA DE CLIENTES]TC
ON TC.CPF = CQ.CPF)AUX


--PASSO 12: PEGANDO SOMENTE O QUE EU QUERO JÁ COM O CASE EMBUTIDO NO SELECT

SELECT AUX.NOME,AUX.[MES/ANO],AUX.[QUANTIDADE MES],AUX.[VOLUME DE COMPRA],
CASE
	WHEN AUX.[QUANTIDADE MES] <= AUX.[VOLUME DE COMPRA] THEN 'VENDA VÁLIDA'
	ELSE 'VENDA INVALIDA' 

END AS 'STATUS DE VENDA'
FROM
(SELECT TC.NOME,CQ.[MES/ANO], CQ.[QUANTIDADE MES],TC.[VOLUME DE COMPRA]
FROM
(SELECT NF.CPF,SUBSTRING(CONVERT (VARCHAR,NF.[DATA],103),4,10) AS 'MES/ANO', SUM (INF.QUANTIDADE) AS 'QUANTIDADE MES' FROM [TABELA DE NOTAS FISCAIS]NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
GROUP BY  NF.CPF,SUBSTRING(CONVERT (VARCHAR,NF.[DATA],103),4,10))CQ
INNER JOIN [TABELA DE CLIENTES]TC
ON TC.CPF = CQ.CPF)AUX



--PASSO 13: ORDANANDO PELO ORDER BY PELO NOME E MES/ANO
SELECT AUX.NOME,AUX.[MES/ANO],AUX.[QUANTIDADE MES],AUX.[VOLUME DE COMPRA],
CASE
	WHEN AUX.[QUANTIDADE MES] <= AUX.[VOLUME DE COMPRA] THEN 'VENDA VÁLIDA'
	ELSE 'VENDA INVALIDA' 

END AS 'STATUS DE VENDA'
FROM
(SELECT TC.NOME,CQ.[MES/ANO], CQ.[QUANTIDADE MES],TC.[VOLUME DE COMPRA]
FROM
(SELECT NF.CPF,SUBSTRING(CONVERT (VARCHAR,NF.[DATA],103),4,10) AS 'MES/ANO', SUM (INF.QUANTIDADE) AS 'QUANTIDADE MES' FROM [TABELA DE NOTAS FISCAIS]NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
GROUP BY  NF.CPF,SUBSTRING(CONVERT (VARCHAR,NF.[DATA],103),4,10))CQ
INNER JOIN [TABELA DE CLIENTES]TC
ON TC.CPF = CQ.CPF)AUX
ORDER BY AUX.NOME, AUX.[MES/ANO]





-- RESPOSTA DO DESAFIO DO RELATORIO DE VENDA ---------

SELECT AUX.NOME, AUX.[ANO/MES],AUX.[QUANTIDADE MES],AUX.[VOLUME DE COMPRA], 
 ROUND ((1 -(AUX.[VOLUME DE COMPRA]/AUX.[QUANTIDADE MES])) * 100,2)  AS 'PERCENTUAL',


	CASE
		WHEN AUX.[QUANTIDADE MES] <= AUX.[VOLUME DE COMPRA] THEN 'VENDA VÁLIDA'
		ELSE 'VENDA INVALIDA'
	END AS 'STATUS VENDA'
FROM
(SELECT TC.NOME,CQ.[ANO/MES], CQ.[QUANTIDADE MES],TC.[VOLUME DE COMPRA]
FROM
(SELECT NF.CPF,SUBSTRING (CONVERT(VARCHAR,NF.DATA,120),1,7) AS 'ANO/MES', SUM (INF.QUANTIDADE) AS 'QUANTIDADE MES' FROM [TABELA DE NOTAS FISCAIS] NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
GROUP BY NF.CPF, SUBSTRING (CONVERT(VARCHAR,NF.DATA,120),1,7))CQ
INNER JOIN [TABELA DE CLIENTES]TC
ON TC.CPF = CQ.CPF)AUX
WHERE  AUX.[QUANTIDADE MES] > AUX.[VOLUME DE COMPRA]
ORDER BY AUX.NOME,AUX.[ANO/MES]



--O  dono da esquina do suco pediu para que mostrasse um relatório mostrando,
--qual foi o  faturamento em dinheiro por sabor de produto e também compararmos 
--a participação daquela venda em relação ao total.
--Somente no ano de 2016

----------------- Relatório de Venda por Sabor -----------------------------



SELECT AUX1.SABOR, AUX1.ANO,ROUND (AUX1.FATURAMENTO,2) AS 'FATURAMENTO', CONVERT(VARCHAR,ROUND((AUX1.FATURAMENTO/AUX2.[FATURAMENTO ANUAL])*100,2))+' %' AS 'PERCENTUAL' FROM
(SELECT TP.SABOR, YEAR (NF.DATA) AS 'ANO', SUM (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY TP.SABOR, YEAR (NF.DATA))AUX1
INNER JOIN (SELECT  YEAR (NF.DATA) AS 'ANO', SUM (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO ANUAL' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY YEAR (NF.DATA))AUX2
ON AUX1.ANO = AUX2.ANO
ORDER BY AUX1.FATURAMENTO DESC

----------------------  PASSO A PASSO --------------------------------------------

--PASSO1: PEGANDO AS TABELAS 
SELECT * FROM [TABELA DE PRODUTOS]

SELECT * FROM [TABELA DE NOTAS FISCAIS]

SELECT * FROM [TABELA DE ITENS NOTAS FISCAIS]


--PASSO 2: PEGANDO OS CAMPOS
SELECT TP.SABOR FROM [TABELA DE PRODUTOS]TP

SELECT NF.DATA FROM [TABELA DE NOTAS FISCAIS]NF

SELECT (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]INF


--PASSO 3: JUNTANDO AS TABELAS
SELECT TP.SABOR, NF.DATA,(INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]


--PASSO 4: FILTRANDO PELA DATA E DANDO NOME AS COLUNAS 
SELECT TP.SABOR, YEAR (NF.DATA) AS 'ANO', (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016



--PASSO 5: AGRUPANDO
SELECT TP.SABOR, YEAR (NF.DATA) AS 'ANO', SUM (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY TP.SABOR, YEAR (NF.DATA)


-- PASSO 6: AGRUPANDO O FATURAMENTO ANUAL (TIRO O CAMPO SABOR) 
SELECT  YEAR (NF.DATA) AS 'ANO', SUM (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY YEAR (NF.DATA)




--SELECT'CAMPO1' ,'CAMPO2' FROM [TABELA DE PRODUTOS]

--PASSO 7: INNER JOIN NAS DUAS CONSULTAS 
SELECT * FROM
(SELECT TP.SABOR, YEAR (NF.DATA) AS 'ANO', SUM (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY TP.SABOR, YEAR (NF.DATA))AUX1

INNER JOIN 

(SELECT  YEAR (NF.DATA) AS 'ANO', SUM (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY YEAR (NF.DATA))AUX2

ON AUX1.ANO = AUX2.ANO




-- PASSO 8: MUDANDO O NOME DO FATURAMENTO DO AUX2 PARA 'FATURAMENTO ANUAL'
SELECT AUX1.SABOR, AUX1.ANO,AUX1.FATURAMENTO,AUX2.[FATURAMENTO ANUAL] FROM
(SELECT TP.SABOR, YEAR (NF.DATA) AS 'ANO', SUM (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY TP.SABOR, YEAR (NF.DATA))AUX1
INNER JOIN (SELECT  YEAR (NF.DATA) AS 'ANO', SUM (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO ANUAL' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY YEAR (NF.DATA))AUX2
ON AUX1.ANO = AUX2.ANO


-- PASSO 9: CRIANDO O PERCENTUAL

SELECT AUX1.SABOR, AUX1.ANO,AUX1.FATURAMENTO,(AUX1.FATURAMENTO/AUX2.[FATURAMENTO ANUAL])*100 AS 'PERCENTUAL' FROM
(SELECT TP.SABOR, YEAR (NF.DATA) AS 'ANO', SUM (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY TP.SABOR, YEAR (NF.DATA))AUX1
INNER JOIN (SELECT  YEAR (NF.DATA) AS 'ANO', SUM (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO ANUAL' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY YEAR (NF.DATA))AUX2
ON AUX1.ANO = AUX2.ANO



--PASSO 10: ORDENANDO PELO FATURAMENTO (AUX1)
SELECT AUX1.SABOR, AUX1.ANO,AUX1.FATURAMENTO,(AUX1.FATURAMENTO/AUX2.[FATURAMENTO ANUAL])*100 AS 'PERCENTUAL' FROM
(SELECT TP.SABOR, YEAR (NF.DATA) AS 'ANO', SUM (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY TP.SABOR, YEAR (NF.DATA))AUX1
INNER JOIN (SELECT  YEAR (NF.DATA) AS 'ANO', SUM (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO ANUAL' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY YEAR (NF.DATA))AUX2
ON AUX1.ANO = AUX2.ANO
ORDER BY AUX1.FATURAMENTO DESC


--PASSO 11: CONVERTENDO E ARRENDONDANDO CAMPOS (FINALIZANDO O RELATÓRIO)

SELECT AUX1.SABOR, AUX1.ANO,ROUND (AUX1.FATURAMENTO,2) AS 'FATURAMENTO', CONVERT(VARCHAR,ROUND((AUX1.FATURAMENTO/AUX2.[FATURAMENTO ANUAL])*100,2))+' %' AS 'PERCENTUAL' FROM
(SELECT TP.SABOR, YEAR (NF.DATA) AS 'ANO', SUM (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY TP.SABOR, YEAR (NF.DATA))AUX1
INNER JOIN (SELECT  YEAR (NF.DATA) AS 'ANO', SUM (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO ANUAL' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY YEAR (NF.DATA))AUX2
ON AUX1.ANO = AUX2.ANO
ORDER BY AUX1.FATURAMENTO DESC



SELECT AUX1.SABOR, AUX1.ANO, FORMAT(CONVERT(DECIMAL(15,2),AUX1.FATURAMENTO),'C','PT-BR') AS 'FATURAMENTO', CONVERT(VARCHAR,ROUND((AUX1.FATURAMENTO/AUX2.[FATURAMENTO ANUAL])*100,2))+' %' AS 'PERCENTUAL' FROM
(SELECT TP.SABOR, YEAR (NF.DATA) AS 'ANO', SUM (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY TP.SABOR, YEAR (NF.DATA))AUX1
INNER JOIN (SELECT  YEAR (NF.DATA) AS 'ANO', SUM (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO ANUAL' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY YEAR (NF.DATA))AUX2
ON AUX1.ANO = AUX2.ANO
ORDER BY AUX1.FATURAMENTO DESC



--OUTRA RESPOSTA COM O FORMAT PARA MOEDA E COM DUAS CASAS DECIMAIS E COM DECIMAL APARECENDO O ZERO NA FORMATACAO DO DECIMAL 'X,10'
--DA DOCUMENTACAO MICROSOFT SOBRE O FORMAT 
 			-- FORMAT(<O NUMERO AQUI>, 'N', 'PT-BR') AS 'Number Format' (FORMATO NUMERICO)
            -- FORMAT(<O NUMERO AQUI>, 'G', 'PT-BR') AS 'General Format'  (FORMATO GERAL)
            -- FORMAT<(O NUMERO AQUI>, 'C', 'PT-BR') AS 'Currency Format'  (FORMATO MOEDA)


SELECT AUX1.SABOR, AUX1.ANO, FORMAT(AUX1.FATURAMENTO,'C','PT-BR') AS 'FATURAMENTO', CONVERT(VARCHAR,ROUND((AUX1.FATURAMENTO/AUX2.[FATURAMENTO ANUAL])*100,2))+' %' AS 'PERCENTUAL' FROM
(SELECT TP.SABOR, YEAR (NF.DATA) AS 'ANO', SUM (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY TP.SABOR, YEAR (NF.DATA))AUX1
INNER JOIN (SELECT  YEAR (NF.DATA) AS 'ANO', SUM (INF.QUANTIDADE * INF.PRECO) AS 'FATURAMENTO ANUAL' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON INF.[CODIGO DO PRODUTO] = TP.[CODIGO DO PRODUTO]
WHERE YEAR (NF.DATA) = 2016
GROUP BY YEAR (NF.DATA))AUX2
ON AUX1.ANO = AUX2.ANO
ORDER BY AUX1.FATURAMENTO DESC


----------------------- AULA 16 - --------------------------------

SELECT * FROM [TABELA DE VENDEDORES]



BEGIN TRANSACTION

UPDATE [TABELA DE VENDEDORES] 
SET [PERCENTUAL COMISSAO] = [PERCENTUAL COMISSAO] * 1.15

INSERT INTO [TABELA DE VENDEDORES] (MATRICULA,NOME, [PERCENTUAL COMISSAO], [DATA DE ADMISSAO],FERIAS,BAIRRO)
VALUES ('99999','João da Silva',0.08,'2014-09-01',0,'Icaraí')

ROLLBACK

COMMIT



------------- AUTO INCREMENTO ------------------------------------------

CREATE TABLE TESTE
( 
	ID INT IDENTITY (1,1) NOT NULL,
	NOME VARCHAR(20) NOT NULL
)

INSERT INTO TESTE(NOME) VALUES ('Roberto Silva')
INSERT INTO TESTE(NOME) VALUES ('André Luiz')
INSERT INTO TESTE(NOME) VALUES ('Jéssica Santos')

SELECT * FROM TESTE

DELETE FROM TESTE WHERE ID = 1

DROP TABLE TESTE


CREATE TABLE TESTE
( 
	ID INT IDENTITY (100,5) NOT NULL,
	NOME VARCHAR(20) NOT NULL
)

INSERT INTO TESTE(NOME) VALUES ('Roberto Silva')
INSERT INTO TESTE(NOME) VALUES ('André Luiz')
INSERT INTO TESTE(NOME) VALUES ('Jéssica Santos')

SELECT * FROM TESTE


---------------- CAMPOS PADRÕES ------------------------------------

CREATE TABLE TAB_PADRAO
(ID INT IDENTITY (1,1) NOT NULL,
DESCRITOR VARCHAR(20) NULL,
ENDERECO VARCHAR(200) NULL,
CIDADE VARCHAR(50) DEFAULT 'Cidade não definida',
DATA_CRIACAO DATE DEFAULT GETDATE())


INSERT INTO [TABELA PADRAO](NOME, ENDERECO, CIDADE, DATA_CRIACAO) VALUES ('Pedro Silva', 'Rua 145', 'São Paulo', '2019-09-25')

SELECT * FROM  [TABELA PADRAO]

INSERT INTO [TABELA PADRAO](NOME, ENDERECO) VALUES ('Pedro Silva', 'Rua 145')

SELECT * FROM  [TABELA PADRAO]



------------------------- TRIGGER ----------------------------------------------------------------

CREATE TABLE [VENDAS DIARIAS]
(
	DATA_VENDA DATE,
	TOTAL_VENDA FLOAT
)


CREATE TRIGGER TG_VENDAS_DIARIAS
ON [TABELA DE ITENS NOTAS FISCAIS]
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
	DELETE FROM [VENDAS DIARIAS]
	
	INSERT INTO [VENDAS DIARIAS] (DATA_VENDA,TOTAL_VENDA)
	
	SELECT NF.DATA, SUM (INF.QUANTIDADE*INF.PRECO) AS 'TOTAL VENDA' FROM [TABELA DE NOTAS FISCAIS]NF
	INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
	ON NF.NUMERO = INF.NUMERO
	GROUP BY NF.DATA
	ORDER BY NF.DATA DESC

END


INSERT INTO [TABELA DE NOTAS FISCAIS] (NUMERO, DATA, CPF, MATRICULA, IMPOSTO)
VALUES ('011111', '2021-06-02', '1471156710', '00235', 0.25)


INSERT INTO [TABELA DE ITENS NOTAS FISCAIS] (NUMERO,[CODIGO DO PRODUTO],[QUANTIDADE],PRECO)
VALUES ('011111', '1000889', 100, 1)



INSERT INTO [TABELA DE ITENS NOTAS FISCAIS] (NUMERO,[CODIGO DO PRODUTO],[QUANTIDADE],PRECO)
VALUES ('011111', '1002334', 100, 1)

DELETE FROM [TABELA DE ITENS NOTAS FISCAIS]
WHERE NUMERO = '011111' AND [CODIGO DO PRODUTO] = '1002334'



UPDATE [TABELA DE ITENS NOTAS FISCAIS]
SET QUANTIDADE = 300
WHERE NUMERO =  '011111' AND [CODIGO DO PRODUTO]= '1000889'


---------------- DESAFIO DA AULA 16 ---------------------------------------

SELECT [CPF], [IDADE], [DATA DE NASCIMENTO],
DATEDIFF(YEAR, [DATA DE NASCIMENTO], GETDATE()) AS 'IDADE' 
FROM [TABELA DE CLIENTES]


CREATE TRIGGER TG_CLIENTES_IDADE
ON [TABELA DE CLIENTES]
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
	UPDATE [TABELA DE CLIENTES] 
	SET [IDADE] = DATEDIFF(YEAR, [DATA DE NASCIMENTO], GETDATE());
END



--TESTANDO O DESAFIO
  INSERT INTO [TABELA DE CLIENTES] (CPF,NOME,ENDERECO,COMPLEMENTO,CIDADE,ESTADO,CEP,[DATA DE NASCIMENTO],IDADE,SEXO,[LIMITE DE CREDITO],[VOLUME DE COMPRA],[PRIMEIRA COMPRA])
  VALUES ('51073366200','Klécio Lira','Rua Conde de Bonfim','','Rio de Janeiro', 'RJ','22020001','2001-01-01',1,'M', 120000,22000,1)

  SELECT * FROM [TABELA DE CLIENTES]
  WHERE NOME LIKE '%Klécio%'


  UPDATE [TABELA DE CLIENTES]
  SET IDADE = 300
  WHERE NOME LIKE '%Klécio%'

 DELETE FROM [TABELA DE CLIENTES]
WHERE NOME LIKE '%Klécio%'


---------------------------- CHECK -------------------------------------------
CREATE TABLE CLIENTE_TESTE
(
	ID INT IDENTITY NOT NULL,
	NOME VARCHAR(20),
	IDADE INT,
	CIDADE VARCHAR(20),

	CHECK (IDADE >= 18)
	
)


INSERT INTO CLIENTE_TESTE ( NOME, IDADE, CIDADE) VALUES ('JOÃO', 19, 'RIO DE JANEIRO')

SELECT * FROM CLIENTE_TESTE


INSERT INTO CLIENTE_TESTE( NOME, IDADE, CIDADE) VALUES ('PEDRO', 20, 'SÃO PAULO')

INSERT INTO CLIENTE_TESTE( NOME, IDADE, CIDADE) VALUES ('MARIA', 17, 'SÃO PAULO')

DROP TABLE CLIENTE_TESTE


CREATE TABLE CLIENTE_TESTE
(
	ID INT IDENTITY NOT NULL,
	NOME VARCHAR(20),
	IDADE INT,
	CIDADE VARCHAR(20),

	CHECK (IDADE >= 18 AND CIDADE = 'São Paulo')
	
)

INSERT INTO CLIENTE_TESTE ( NOME, IDADE, CIDADE) VALUES ('JOÃO', 19, 'RIO DE JANEIRO')

INSERT INTO CLIENTE_TESTE( NOME, IDADE, CIDADE) VALUES ('PEDRO', 20, 'SÃO PAULO')

INSERT INTO CLIENTE_TESTE( NOME, IDADE, CIDADE) VALUES ('MARIA', 17, 'SÃO PAULO')

SELECT * FROM CLIENTE_TESTE

UPDATE CLIENTE_TESTE
SET CIDADE = 'Campinas'
WHERE ID = 2



------------------------------ RESTRIÇÕES -----------------------------------

-- SEM RESTRIÇÕES
CREATE TABLE CLIENTE_TESTE
(
	ID_CLIENTE INT IDENTITY NOT NULL,
	NOME VARCHAR(20),
	IDADE INT,
	CIDADE VARCHAR(20),
	SEXO CHAR (1),
	EMAIL VARCHAR (30),
	
)


INSERT INTO CLIENTE_TESTE (NOME,IDADE,CIDADE,SEXO,EMAIL)
VALUES ('José Laborda',42,'Campinas','M','jose@teste.com.br')

DROP TABLE CLIENTE_TESTE


-- SEM AS CONTRAINTS
CREATE TABLE CLIENTE_TESTE
(
	ID_CLIENTE INT IDENTITY NOT NULL,
	NOME VARCHAR(20) NOT NULL,
	IDADE INT NOT NULL,
	CIDADE VARCHAR(20) NOT NULL,
	SEXO CHAR (1) NOT NULL,
	EMAIL VARCHAR (30) NOT NULL,
	

	
	CHECK (IDADE >= 18),
	CHECK (SEXO IN('M','F')),
	PRIMARY KEY (ID_CLIENTE),
	UNIQUE (EMAIL)
	
)

INSERT INTO CLIENTE_TESTE (NOME,IDADE,CIDADE,SEXO,EMAIL)
VALUES ('José Laborda',42,'Campinas','M','jose@teste.com.br')




-- COM AS RESTRIÇÕES E DEFINIDAS PELA CONSTRAINTS
CREATE TABLE CLIENTE_TESTE
(
	ID_CLIENTE INT IDENTITY NOT NULL,
	NOME VARCHAR(20) NOT NULL,
	IDADE INT NOT NULL,
	CIDADE VARCHAR(20) NOT NULL,
	SEXO CHAR (1) NOT NULL,
	EMAIL VARCHAR (30) NOT NULL,

	
	CONSTRAINT CK_IDADE CHECK (IDADE >= 18),
	CONSTRAINT CK_SEXO CHECK (SEXO IN('M','F')),
	CONSTRAINT PK_ID PRIMARY KEY (ID_CLIENTE),
	CONSTRAINT UQ_EMAIL UNIQUE (EMAIL)
	
)

INSERT INTO CLIENTE_TESTE (NOME,IDADE,CIDADE,SEXO,EMAIL)
VALUES ('José Laborda',42,'Campinas','M','jose@teste.com.br')


DROP TABLE CLIENTE_TESTE




CREATE TABLE CLIENTE_TESTE
(
	ID_CLIENTE INT IDENTITY NOT NULL,
	NOME VARCHAR(20) NOT NULL,
	IDADE INT NOT NULL,
	CIDADE VARCHAR(20) NOT NULL,
	SEXO CHAR (1) NOT NULL,
	EMAIL VARCHAR (30) NOT NULL,
	NUMERO VARCHAR (6) NOT NULL,

	
	CONSTRAINT CK_IDADE CHECK (IDADE >= 18),
	CONSTRAINT CK_SEXO CHECK (SEXO IN('M','F')),
	CONSTRAINT PK_ID PRIMARY KEY (ID_CLIENTE),
	CONSTRAINT UQ_EMAIL UNIQUE (EMAIL),
	CONSTRAINT FK_CLIENTE_TESTE_TABELA_DE_NOTAS_FISCAIS FOREIGN KEY  (NUMERO) REFERENCES [TABELA DE NOTAS FISCAIS] (NUMERO)
	
)

INSERT INTO CLIENTE_TESTE (NOME,IDADE,CIDADE,SEXO,EMAIL,NUMERO)
VALUES ('José Ladislau',43,'Campinas','M','ladislau@teste.com.br','01111')



--ALTERANDO A TABELA PARA ADICIONAR CONSTRAINT


DROP TABLE CLIENTE_TESTE

CREATE TABLE CLIENTE_TESTE
(
	ID_CLIENTE INT IDENTITY NOT NULL,
	NOME VARCHAR(20) NOT NULL,
	IDADE INT NOT NULL,
	CIDADE VARCHAR(20) NOT NULL,
	SEXO CHAR (1) NOT NULL,
	EMAIL VARCHAR (30) NOT NULL,
	NUMERO VARCHAR (6) NOT NULL,

	
	CONSTRAINT CK_IDADE CHECK (IDADE >= 18),
	CONSTRAINT CK_SEXO CHECK (SEXO IN('M','F')),
	--CONSTRAINT PK_ID PRIMARY KEY (ID_CLIENTE),
	CONSTRAINT UQ_EMAIL UNIQUE (EMAIL),
	--CONSTRAINT FK_CLIENTE_TESTE_TABELA_DE_NOTAS_FISCAIS FOREIGN KEY  (NUMERO) REFERENCES [TABELA DE NOTAS FISCAIS] (NUMERO)
	
)


ALTER TABLE [CLIENTE_TESTE]
	ADD CONSTRAINT PK_ID PRIMARY KEY (ID_CLIENTE)

ALTER TABLE [CLIENTE_TESTE]
	ADD CONSTRAINT FK_CLIENTE_TESTE_TABELA_DE_NOTAS_FISCAIS FOREIGN KEY  (NUMERO) REFERENCES [TABELA DE NOTAS FISCAIS] (NUMERO)



ALTER TABLE CLIENTE_TESTE
	DROP  CONSTRAINT PK_ID

ALTER TABLE CLIENTE_TESTE
	DROP CONSTRAINT FK_CLIENTE_TESTE_TABELA_DE_NOTAS_FISCAIS







--------------------------- AULA 17 ----------------------------------------




--DDL

------------------ALTER TABLE-----------------------------------------------


/* CREATE TABLE */
CREATE TABLE PRODUTO (
IDPRODUTO INT IDENTITY NOT NULL,
DESCRICAO VARCHAR(30) NOT NULL,
PRECO FLOAT NOT NULL,

)

--Para adicionar uma coluna em uma tabela, use a seguinte sintaxe: 
ALTER TABLE PRODUTO
ADD FRETE FLOAT NULL



SELECT * FROM PRODUTO 

--Para excluir uma coluna em uma tabela, use a seguinte sintaxe (observe que alguns sistemas de banco de dados não permitem a exclusão de uma coluna): 
ALTER TABLE PRODUTO
DROP COLUMN FRETE


SELECT * FROM PRODUTO 

-- Para alterar o tipo de dados de uma coluna em uma tabela, use a seguinte sintaxe: 
ALTER TABLE PRODUTO
ALTER COLUMN FRETE DECIMAL(10,2)


-- Incluir constraint e excluir
ALTER TABLE [CLIENTE_TESTE]
	ADD CONSTRAINT PK_ID PRIMARY KEY (ID_CLIENTE)

ALTER TABLE [CLIENTE_TESTE]
	ADD CONSTRAINT FK_CLIENTE_TESTE_TABELA_DE_NOTAS_FISCAIS FOREIGN KEY  (NUMERO) REFERENCES [TABELA DE NOTAS FISCAIS] (NUMERO)


ALTER TABLE CLIENTE_TESTE
	DROP  CONSTRAINT PK_ID

ALTER TABLE CLIENTE_TESTE
	DROP CONSTRAINT FK_CLIENTE_TESTE_TABELA_DE_NOTAS_FISCAIS


/* ACRESCENTAR UMA COLUNA */
ALTER TABLE [NOME DA TABELA]
ADD [NOME DA COLUNA] <TIPO>

/* EXCLUIR COLUNA */
ALTER TABLE [NOME DA TABELA]
DROP [NOME DA COLUNA]

/* ALTERAR COLUNA*/
ALTER TABLE [NOME DA TABELA]
ALTER COLUMN [NOME DA COLUNA] <TIPO>

/* INCLUIR CONSTRAINT - PRIMARY KEY*/
ALTER TABLE [NOME DA TABELA]
	ADD CONSTRAINT [NOME DA CONSTRAINT] PRIMARY KEY ([NOME DO CAMPO])

/* INCLUINDO CHAVE ESTRANGEIRA - FOREIGN KEY*/
ALTER TABLE [NOME DA TABELA]
	ADD CONSTRAINT [NOME DA CONSTRAINT] FOREIGN KEY  ([NOME DO CAMPO]) REFERENCES [TABELA DE REFERÊNCIA] ([NOME DO CAMPO REFERENTE])

/* EXCLUIR CONSTRAINT - PRIMARY KEY*/
ALTER TABLE [NOME DA TABELA]
	DROP  CONSTRAINT [NOME DA CONSTRAINT]


------------------- AULA 18 ----------------------------------------------

SELECT * FROM [TABELA DE CLIENTES]

SELECT EMBALAGEM, TAMANHO FROM [TABELA DE PRODUTOS]

SELECT DISTINCT EMBALAGEM, TAMANHO FROM [TABELA DE PRODUTOS]


--------------------- T-SQL ---------------------------------------------

-- DECLARACAO DE VARIAVEIS
DECLARE @TESTE VARCHAR (20)

SET @TESTE = 'SQL SERVER'

SELECT @TESTE AS 'UM TESTE'

--ESTRUTURA IF
DECLARE @RESPOSTA VARCHAR (20)
DECLARE @VALOR INT

SET @VALOR = 3

IF @VALOR = 3
	PRINT 'Valor menor ou igual a 10'
ELSE
	PRINT 'Valor maior que 10'

-- ESTRUTURA DE FLUXO
BEGIN
	
	SELECT * FROM [TABELA DE NOTAS FISCAIS];
	SELECT * FROM [TABELA DE VENDEDORES];

END
GO

--LOOP (WHILE)
DECLARE @CONTADOR INT
	SET @CONTADOR = 1
WHILE (@CONTADOR <= 5)
BEGIN
	PRINT @CONTADOR
	SET @CONTADOR = @CONTADOR + 1
END
GO


-------- DECLARACAO DE VARIAVEIS ------------------------------

DECLARE @IDADE INT
DECLARE @NOME VARCHAR (200)
DECLARE @DATA DATE

DECLARE @IDADE2 INT, @NOME2 VARCHAR(200), @DATA2 DATE

SET @IDADE = 20
PRINT @IDADE

SET @NOME = 'Lael do Santos'
PRINT @NOME

SET @DATA = '2021-06-07'
PRINT @DATA

DECLARE @CPF VARCHAR (12)
SET @CPF = '1471156710'

SELECT NOME, [DATA DE NASCIMENTO], IDADE FROM [TABELA DE CLIENTES]
WHERE CPF = '1471156710'

SELECT NOME, [DATA DE NASCIMENTO], IDADE FROM [TABELA DE CLIENTES]
WHERE CPF = @CPF

SELECT @NOME2=NOME,@DATA2=[DATA DE NASCIMENTO],@IDADE2=IDADE FROM [TABELA DE CLIENTES]
WHERE CPF = @CPF


--COM INSERT
DECLARE @MATRICULA VARCHAR(5), @NOME VARCHAR(100), @PERCENTUAL FLOAT, @DATA DATE, @FERIAS BIT, @BAIRRO VARCHAR(100)
SET @MATRICULA = '00239'
SET @NOME = 'Denise Souza'
SET @PERCENTUAL = 0.10
SET @DATA = '20210607'
SET @FERIAS = 0
SET @BAIRRO = 'Meier'

INSERT INTO [TABELA DE VENDEDORES](MATRICULA,NOME,[PERCENTUAL COMISSAO],[DATA DE ADMISSAO], FERIAS,BAIRRO)
VALUES (@MATRICULA,@NOME,@PERCENTUAL,@DATA,@FERIAS,@BAIRRO)

SELECT * FROM [TABELA DE VENDEDORES]


--COM INSERT 2
DECLARE @MATRICULA VARCHAR(5), @NOME VARCHAR(100), @PERCENTUAL FLOAT, @DATA DATE, @FERIAS BIT, @BAIRRO VARCHAR(100)
SET @MATRICULA = '00240'
SET @NOME = 'Aline dos Santos'
SET @PERCENTUAL = 0.12
SET @DATA = '20200409'
SET @FERIAS = 0
SET @BAIRRO = 'Jardins'

INSERT INTO [TABELA DE VENDEDORES](MATRICULA,NOME,[PERCENTUAL COMISSAO],[DATA DE ADMISSAO], FERIAS,BAIRRO)
VALUES (@MATRICULA,@NOME,@PERCENTUAL,@DATA,@FERIAS,@BAIRRO)

SELECT * FROM [TABELA DE VENDEDORES]


----------------------- DESAFIO 01 - AULA 18 ------------------------------------
DECLARE @CLIENTE VARCHAR(10)
DECLARE @IDADE INT
DECLARE @DATANASCIMENTO DATE
DECLARE @CUSTO FLOAT
SET @CLIENTE = 'João'
SET @IDADE = 10
SET @DATANASCIMENTO = '20170110'
SET @CUSTO = 10.23
PRINT 'CLIENTE: '+ @CLIENTE
PRINT 'IDADE: ' + CONVERT (VARCHAR,@IDADE)
PRINT 'DATA DE NASCIMENTO: ' + CONVERT (VARCHAR,@DATANASCIMENTO)
PRINT 'CUSTO: ' + CONVERT (VARCHAR,@CUSTO)

SELECT @CLIENTE AS 'CLIENTE',@IDADE AS 'IDADE',@DATANASCIMENTO AS 'DATA DE NASCIMENTO',@CUSTO AS 'CUSTO'


------------------- DESAFIO 02 - AULA 18 ---------------------------------------
DECLARE @NUMNOTAS INT

SELECT @NUMNOTAS = COUNT(*) FROM [TABELA DE NOTAS FISCAIS]
WHERE DATA = '20170101'

PRINT 'QUANTIDADE DE NOTAS FISCAIS: ' + CONVERT(VARCHAR,@NUMNOTAS)


---------------- AULA 18 - CONTROLE DE FLUXO -------------------------------

IF OBJECT_ID('TABELA_TESTE','U') IS NOT NULL 
	BEGIN
		DROP TABLE TABELA_TESTE
	END

CREATE TABLE TABELA_TESTE
(
	ID VARCHAR (10)
)

IF OBJECT_ID('TABELA_TESTE','U') IS  NULL
	BEGIN
		CREATE TABLE TABELA_TESTE
			(
				ID VARCHAR (10)
			)
	END

----------------- AULA 18 - CONTROLE DE FLUXO DOS VALORES DE VARIÁVEIS -------------

SELECT GETDATE()
SELECT DATENAME(WEEKDAY,GETDATE())
SELECT DATENAME(WEEKDAY,DATEADD(DAY,4,GETDATE()))



DECLARE @DIA_SEMANA VARCHAR (20)
DECLARE @NUMERO_DIAS INT

SET @NUMERO_DIAS = 4
SET @DIA_SEMANA = DATENAME(WEEKDAY,DATEADD(DAY,@NUMERO_DIAS,GETDATE()))

PRINT @DIA_SEMANA 
IF @DIA_SEMANA = 'Domingo' OR @DIA_SEMANA = 'Sábado'
	PRINT 'Este dia é fim de semana'
ELSE
	PRINT 'Este dia é dia de semana'


--------- DESAFIO 03 - AULA 18 ---------------------------------------
DECLARE @DATANOTA DATE
DECLARE @NUMNOTAS INT
SET @DATANOTA = '20170102'
SELECT @NUMNOTAS = COUNT(*) FROM [NOTAS FISCAIS] 
    WHERE DATA = @DATANOTA
IF @NUMNOTAS > 70
    PRINT 'Muita nota'
ELSE
    PRINT 'Pouca nota'
PRINT @NUMNOTAS


----------- AULA 18 - CONTROLE DE FLUXO USANDO SELECT ----------------
SELECT * FROM [TABELA DE CLIENTES]

SELECT SUM ([LIMITE DE CREDITO]) FROM [TABELA DE CLIENTES]
WHERE BAIRRO = 'Jardins'


DECLARE @LIMITE_MAXIMO FLOAT, @LIMITE_ATUAL FLOAT
DECLARE @BAIRRO VARCHAR (20)

SET @BAIRRO = 'Jardins'
SET @LIMITE_MAXIMO = 500000

SELECT @LIMITE_ATUAL =  SUM ([LIMITE DE CREDITO]) FROM [TABELA DE CLIENTES] WHERE BAIRRO = @BAIRRO

IF @LIMITE_MAXIMO <= (SELECT SUM ([LIMITE DE CREDITO]) FROM [TABELA DE CLIENTES] WHERE BAIRRO = @BAIRRO)
BEGIN
	PRINT 'Valor estourou. Não é possível abrir novos créditos.'
END
ELSE
BEGIN
	PRINT 'Valor não estourou. É possível abrir novos créditos.'
END

-- MELHORADO 
DECLARE @LIMITE_MAXIMO FLOAT, @LIMITE_ATUAL FLOAT
DECLARE @BAIRRO VARCHAR (20)

SET @BAIRRO = 'Jardins'
SET @LIMITE_MAXIMO = 500000

SELECT @LIMITE_ATUAL =  SUM ([LIMITE DE CREDITO]) FROM [TABELA DE CLIENTES] WHERE BAIRRO = @BAIRRO

IF @LIMITE_MAXIMO <= @LIMITE_ATUAL
BEGIN
	PRINT 'Valor estourou. Não é possível abrir novos créditos.'
END
ELSE
BEGIN
	PRINT 'Valor não estourou. É possível abrir novos créditos.'
END

------------------ DESAFIO 04 DA AULA 18 -----------------------------------------

DECLARE @DATANOTA DATE
DECLARE @NUMNOTAS INT

SET @DATANOTA = '20170102'

SELECT @NUMNOTAS = COUNT(*) FROM [TABELA DE NOTAS FISCAIS]
    WHERE DATA = @DATANOTA

IF (SELECT COUNT(*) FROM [TABELA DE NOTAS FISCAIS]
    WHERE DATA = @DATANOTA) > 70
    PRINT 'Muita nota'
ELSE
    PRINT 'Pouca nota'

PRINT @NUMNOTAS

-------------------LOOPING --------------------------------------------
--PRIMEIRO EXEMPLO
DECLARE @LIMITE_MINIMO INT, @LIMITE_MAXIMO INT
SET @LIMITE_MINIMO = 1
SET @LIMITE_MAXIMO = 10

WHILE @LIMITE_MINIMO <= @LIMITE_MAXIMO
BEGIN
	PRINT @LIMITE_MINIMO
	SET @LIMITE_MINIMO = @LIMITE_MINIMO+1
	

END

--SEGUNDO EXEMPLO (BREAK)
DECLARE @LIMITE_MINIMO INT, @LIMITE_MAXIMO INT
SET @LIMITE_MINIMO = 1
SET @LIMITE_MAXIMO = 10

WHILE @LIMITE_MINIMO <= @LIMITE_MAXIMO
BEGIN
	PRINT @LIMITE_MINIMO
	SET @LIMITE_MINIMO = @LIMITE_MINIMO+1
	IF @LIMITE_MINIMO = 6 BREAK
END

--TERCEIRO EXEMPLO (BREAK)
DECLARE @LIMITE_MINIMO INT, @LIMITE_MAXIMO INT, @LIMITE_BREAK INT
SET @LIMITE_MINIMO = 1
SET @LIMITE_MAXIMO = 10
SET @LIMITE_BREAK = 7

WHILE @LIMITE_MINIMO <= @LIMITE_MAXIMO
BEGIN
	PRINT @LIMITE_MINIMO
	SET @LIMITE_MINIMO = @LIMITE_MINIMO+1
	IF @LIMITE_MINIMO = @LIMITE_BREAK 
	BEGIN
		PRINT 'Saindo por causa do BREAK'
		BREAK
	END
	
END
--QUARTO EXEMPLO (CNTINUE)
DECLARE @LIMITE_MINIMO INT, @LIMITE_MAXIMO INT, @LIMITE_BREAK INT
SET @LIMITE_MINIMO = 1
SET @LIMITE_MAXIMO = 10
SET @LIMITE_BREAK = 7

WHILE @LIMITE_MINIMO <= @LIMITE_MAXIMO
BEGIN
	PRINT @LIMITE_MINIMO
	SET @LIMITE_MINIMO = @LIMITE_MINIMO+1
	IF @LIMITE_MINIMO = @LIMITE_BREAK 
	BEGIN
		PRINT 'Continuando  por causa do CONTINUE'
		CONTINUE
	END
	
END

-------------------- DESAFIO 05 DA AULA 18 ----------------------
DECLARE @DATAINICIAL DATE
DECLARE @DATAFINAL DATE
DECLARE @NUMNOTAS INT
SET @DATAINICIAL = '20170101'
SET @DATAFINAL = '20170110'
WHILE @DATAINICIAL <= @DATAFINAL
BEGIN
    SELECT @NUMNOTAS = COUNT(*) FROM [TABELA DE NOTAS FISCAIS]
	WHERE DATA = @DATAINICIAL
    
	PRINT CONVERT(VARCHAR(10), @DATAINICIAL) + ' --> ' +  CONVERT(VARCHAR(10), @NUMNOTAS)
    SELECT @DATAINICIAL = DATEADD(DAY, 1, @DATAINICIAL)
END

------------------------------------------------------------------
IF OBJECT_ID ('TABELA DE NUMEROS','U') IS NOT NULL
	DROP TABLE [TABELA DE NUMEROS]

CREATE TABLE [TABELA DE NUMEROS]
(
	NUMERO INT,
	STATUS VARCHAR (200)
)

DECLARE @LIMITE_MINIMO INT, @LIMITE_MAXIMO INT, @CONTADOR_NOTAS INT

SET @LIMITE_MINIMO = 1
SET @LIMITE_MAXIMO = 1000

WHILE @LIMITE_MINIMO <= @LIMITE_MAXIMO
BEGIN
	SELECT @CONTADOR_NOTAS = COUNT (*) FROM [TABELA DE NOTAS FISCAIS] WHERE NUMERO = @LIMITE_MINIMO
	IF @CONTADOR_NOTAS > 0
		BEGIN
			INSERT INTO [TABELA DE NUMEROS] (NUMERO,STATUS)
			VALUES (@LIMITE_MINIMO,'É NOTA FISCAL')
		END
	ELSE 
		BEGIN
			INSERT INTO [TABELA DE NUMEROS](NUMERO,STATUS)
			VALUES (@LIMITE_MINIMO,'NÃO É NOTA FISCAL')
		END
	
	SET @LIMITE_MINIMO = @LIMITE_MINIMO + 1

END

SELECT * FROM [TABELA DE NUMEROS]


------- DESAFIO 06 DA AULA 18 ----------------------------

IF OBJECT_ID('TABELANOTAS','U') IS NOT NULL
DROP TABLE TABELANOTAS

CREATE TABLE TABELANOTAS 
(
	DATA DATE, 
	NUMNOTAS INT
)

DECLARE @DATAINICIAL DATE
DECLARE @DATAFINAL DATE
DECLARE @NUMNOTAS INT
SET @DATAINICIAL = '20170101'
SET @DATAFINAL = '20170110'
WHILE @DATAINICIAL <= @DATAFINAL
	BEGIN
		SELECT @NUMNOTAS = COUNT(*) FROM [TABELA DE NOTAS FISCAIS]
		WHERE DATA = @DATAINICIAL
		
		--INSERINDO NA TABELA 
		INSERT INTO TABELANOTAS (DATA, NUMNOTAS) 
			VALUES (@DATAINICIAL, @NUMNOTAS)
		
		SELECT @DATAINICIAL = DATEADD(DAY, 1, @DATAINICIAL)
	END
	
SELECT * FROM TABELANOTAS


-------------- TABELA TEMPORÁRIA ------------------------------
CREATE TABLE #TABELA01 
(
	ID VARCHAR (10) NULL,
	NOME VARCHAR (200) NULL
)

INSERT INTO #TABELA01 (ID,NOME)
VALUES ('1', 'PEDRO')

INSERT INTO #TABELA01 (ID,NOME)
VALUES ('2','ANA')


SELECT * FROM #TABELA01

-----------------------------------------
CREATE TABLE ##TABELA02 
(
	ID VARCHAR (10) NULL,
	NOME VARCHAR (200) NULL
)

INSERT INTO ##TABELA02 (ID,NOME)
VALUES ('1', 'PEDRO')

INSERT INTO ##TABELA02 (ID,NOME)
VALUES ('2','ANA')

SELECT * FROM ##TABELA02

---------------------------------------------


DECLARE @LIMITE_MINIMO INT, @LIMITE_MAXIMO INT, @CONTADOR_NOTAS INT
DECLARE @TABELA_NUMEROS TABLE (NUMERO INT,	STATUS VARCHAR (200))

SET @LIMITE_MINIMO = 1
SET @LIMITE_MAXIMO = 1000

WHILE @LIMITE_MINIMO <= @LIMITE_MAXIMO
BEGIN
	SELECT @CONTADOR_NOTAS = COUNT (*) FROM [TABELA DE NOTAS FISCAIS] WHERE NUMERO = @LIMITE_MINIMO
	IF @CONTADOR_NOTAS > 0
		BEGIN
			INSERT INTO @TABELA_NUMEROS (NUMERO,STATUS)
			VALUES (@LIMITE_MINIMO,'É NOTA FISCAL')
		END
	ELSE 
		BEGIN
			INSERT INTO @TABELA_NUMEROS (NUMERO,STATUS)
			VALUES (@LIMITE_MINIMO,'NÃO É NOTA FISCAL')
		END
	
	SET @LIMITE_MINIMO = @LIMITE_MINIMO + 1

END

SELECT * FROM @TABELA_NUMEROS
--------------------------------------------------------------

DECLARE @LIMITE_MINIMO INT, @LIMITE_MAXIMO INT, @CONTADOR_NOTAS INT
DECLARE @TABELA_NUMEROS TABLE ([NUMERO] INT, [STATUS] VARCHAR(200))


SET @LIMITE_MINIMO = 1
SET @LIMITE_MAXIMO = 1000


WHILE @LIMITE_MINIMO <= @LIMITE_MAXIMO
BEGIN
   SELECT @CONTADOR_NOTAS = COUNT(*) FROM [TABELA DE NOTAS FISCAIS] WHERE [NUMERO] = @LIMITE_MINIMO
   IF @CONTADOR_NOTAS > 0 
       BEGIN
          INSERT INTO @TABELA_NUMEROS ([NUMERO], [STATUS]) VALUES (@LIMITE_MINIMO, 'É nota fiscal')
	   END
   ELSE
       BEGIN
          INSERT INTO @TABELA_NUMEROS ([NUMERO], [STATUS]) VALUES (@LIMITE_MINIMO, 'Não é nota fiscal')
	   END
   SET @LIMITE_MINIMO = @LIMITE_MINIMO + 1   
END

SELECT * FROM @TABELA_NUMEROS


------------------ AULA 19 - FUNÇÕES NO SQL ------------------------------------------------

--Funções definidas pelo usuário
SELECT SUM(QUANTIDADE * PRECO) FROM [TABELA DE ITENS NOTAS FISCAIS]
WHERE NUMERO = 100

CREATE FUNCTION FaturamentoNota (@NUMERO INT) RETURNS FLOAT
AS
BEGIN
	DECLARE @FATURAMENTO FLOAT
	SELECT @FATURAMENTO = SUM(QUANTIDADE * PRECO) FROM [TABELA DE ITENS NOTAS FISCAIS]
	WHERE NUMERO = @NUMERO
	
	RETURN @FATURAMENTO
END


SELECT NUMERO, [dbo].[FaturamentoNota](NUMERO) AS FATURAMENTO FROM [TABELA DE NOTAS FISCAIS]


SELECT  NUMERO, [dbo].[FaturamentoNota](NUMERO) AS 'FATURAMENTO' FROM [TABELA DE NOTAS FISCAIS]
WHERE NUMERO >= 100 AND NUMERO <= 1000
ORDER BY [dbo].[FaturamentoNota](NUMERO) DESC

---------------------------- DESAFIO 01 ----------------------------------

--ENTENDENDO O DESAFIO

DECLARE @NUMNOTAS INT
SELECT @NUMNOTAS = COUNT(*) FROM [TABELA DE NOTAS FISCAIS]
    WHERE DATA = '20170101'
PRINT @NUMNOTAS


CREATE FUNCTION NUMERONOTAS (@DATA DATE) RETURNS INT
AS
BEGIN
DECLARE @NUMNOTAS INT
	SELECT @NUMNOTAS = COUNT(*) FROM [TABELA DE NOTAS FISCAIS]
    WHERE DATA = @DATA
RETURN @NUMNOTAS
END




SELECT [dbo].[NUMERONOTAS] ('2015-01-01')AS 'QUANTIDADE DE NOTAS POR DATA'



SELECT TOP 500 DATA, [dbo].[NUMERONOTAS](DATA) 'QUANTIDADE DE NOTAS'  FROM [TABELA DE NOTAS FISCAIS]
ORDER BY DATA


SELECT   TOP 500 DATA,[dbo].[NUMERONOTAS](DATA) AS 'QUANTIDADE DE NOTAS' FROM [TABELA DE NOTAS FISCAIS]
GROUP BY DATA
ORDER BY DATA



SELECT  DISTINCT TOP 50 DATA,[dbo].[NUMERONOTAS](DATA) AS 'QUANTIDADE DE NOTAS' FROM [TABELA DE NOTAS FISCAIS]
--WHERE DATA = '2015-05-17'



SELECT DATA,COUNT (*) FROM [TABELA DE NOTAS FISCAIS]
WHERE DATA = '2015-01-01'
GROUP BY DATA

SELECT COUNT (*) FROM [TABELA DE NOTAS FISCAIS]
WHERE DATA = '2015-05-17'

SELECT * FROM [TABELA DE NOTAS FISCAIS]
WHERE DATA = '2015-01-01'


--RESPOSTA DO DESAFIO


DECLARE @NUMNOTAS INT
SELECT @NUMNOTAS = COUNT(*) FROM [TABELA DE NOTAS FISCAIS]
    WHERE DATA = '20170101'
PRINT @NUMNOTAS


CREATE FUNCTION NUMERONOTAS (@DATA DATE) RETURNS INT
AS
BEGIN
DECLARE @NUMNOTAS INT
SELECT @NUMNOTAS = COUNT(*) FROM [TABELA DE NOTAS FISCAIS]
    WHERE DATA = @DATA
RETURN @NUMNOTAS
END

SELECT [dbo].[NUMERONOTAS] ('20170202')AS 'QUANTIDADE DE NOTAS POR DATA'

------------------- FUNÇÕES DENTRO DO LOOP -----------------------------------
DECLARE @LIMITE_MINIMO INT, @LIMITE_MAXIMO INT, @CONTADOR_NOTAS INT
DECLARE @TABELA_NUMEROS TABLE (NUMERO INT, STATUS VARCHAR(200), FATURAMENTO FLOAT)

SET @LIMITE_MINIMO = 98
SET @LIMITE_MAXIMO = 102


WHILE @LIMITE_MINIMO <= @LIMITE_MAXIMO
BEGIN
   SELECT @CONTADOR_NOTAS = COUNT(*) FROM [TABELA DE NOTAS FISCAIS] WHERE NUMERO = @LIMITE_MINIMO
   IF @CONTADOR_NOTAS > 0 
       BEGIN
          INSERT INTO @TABELA_NUMEROS (NUMERO, STATUS, FATURAMENTO) 
		  VALUES (@LIMITE_MINIMO, 'É nota fiscal', [dbo].[FaturamentoNota](@LIMITE_MINIMO))
	    END
   ELSE
       BEGIN
          INSERT INTO @TABELA_NUMEROS ([NUMERO], [STATUS], [FATURAMENTO]) 
		  VALUES (@LIMITE_MINIMO, 'Não é nota fiscal', 0)
	    END
   SET @LIMITE_MINIMO = @LIMITE_MINIMO + 1   
END

SELECT * FROM @TABELA_NUMEROS

--------------------DESAFIO 02 DA AULA 19 ------------------------------------------

CREATE TABLE TABELANOTAS (DATA DATE, NUMNOTAS INT)
DECLARE @DATAINICIAL DATE
DECLARE @DATAFINAL DATE
DECLARE @NUMNOTAS INT
SET @DATAINICIAL = '20170101'
SET @DATAFINAL = '20170110'
WHILE @DATAINICIAL <= @DATAFINAL
BEGIN
   SELECT @NUMNOTAS = COUNT(*) FROM [TABELA DE NOTAS FISCAIS]
    WHERE DATA = @DATAINICIAL
   INSERT INTO TABELANOTAS (DATA, NUMNOTAS) 
    VALUES (@DATAINICIAL, @NUMNOTAS)
   SELECT @DATAINICIAL = DATEADD(DAY, 1, @DATAINICIAL)
END
SELECT * FROM TABELANOTAS

--RESPOSTA

CREATE TABLE TABELANOTAS (DATA DATE, NUMNOTAS INT)
DECLARE @DATAINICIAL DATE
DECLARE @DATAFINAL DATE
SET @DATAINICIAL = '20170101'
SET @DATAFINAL = '20170110'
WHILE @DATAINICIAL <= @DATAFINAL
BEGIN
   INSERT INTO TABELANOTAS (DATA, NUMNOTAS) 
    VALUES (@DATAINICIAL, [dbo].[NUMERONOTAS](@DATAINICIAL))
   SELECT @DATAINICIAL = DATEADD(DAY, 1, @DATAINICIAL)
END

SELECT * FROM TABELANOTAS


--------------------- USANDO FUNÇÕES COMO TABELAS -------------------------------
SELECT * FROM [TABELA DE CLIENTES]

SELECT * FROM [TABELA DE NOTAS FISCAIS]
WHERE CPF = '1471156710'

CREATE FUNCTION ListaNotasCliente (@CPF VARCHAR (12)) RETURNS TABLE
AS
RETURN SELECT * FROM [TABELA DE NOTAS FISCAIS] WHERE CPF = @CPF

SELECT * FROM [dbo].[ListaNotasCliente]('1471156710')

SELECT COUNT(*) FROM [dbo].[ListaNotasCliente]('1471156710')

SELECT CPF, (SELECT COUNT(*) FROM [dbo].[ListaNotasCliente]('1471156710')) AS 'NUMERO DE NOTAS'
FROM [TABELA DE CLIENTES]

SELECT CPF, (SELECT COUNT(*) FROM [dbo].[ListaNotasCliente](CPF)) AS 'NUMERO DE NOTAS'
FROM [TABELA DE CLIENTES]

SELECT * FROM
(SELECT CPF, (SELECT COUNT(*) FROM [dbo].[ListaNotasCliente](CPF)) AS 'NUMERO DE NOTAS'
FROM [TABELA DE CLIENTES]) A

------------------- DESAFIO 03 DA AULA 19 ----------------------------------
SELECT DISTINCT DATA, [dbo].[NUMERONOTAS](DATA) AS 'NUMERO'
 FROM [TABELA DE NOTAS FISCAIS] 
WHERE DATA >= '20170101' AND DATA <= '20170110'

-- RESPOSTA
CREATE FUNCTION FUNCTABELANOTAS (@DATA_INICIO DATE, @DATA_FIM DATE) RETURNS TABLE
AS
RETURN    
SELECT DISTINCT DATA, [dbo].[NUMERONOTAS](DATA) AS NUMERO FROM [TABELA DE NOTAS FISCAIS]  
WHERE DATA >= @DATA_INICIO AND DATA <= @DATA_FIM

--TESTANDO O DESAFIO
SELECT * FROM [dbo].[FuncTabelaNotas]('20170101','20170110')


------------------------ ALTERANDO UMA FUNCAO -----------------------------------

CREATE FUNCTION EnderecoCompleto 
(@ENDERECO VARCHAR (100), @BAIRRO VARCHAR (20) ,@CIDADE VARCHAR (50), @ESTADO VARCHAR (50), @CEP VARCHAR (20)) RETURNS VARCHAR (250)
AS
BEGIN 
	DECLARE @ENDERECO_COMPLETO VARCHAR (250)
	SET @ENDERECO_COMPLETO = @ENDERECO + ' - '+ @BAIRRO + ' - ' + @CIDADE + ' - ' + @ESTADO + ' - ' + @CEP
	
	RETURN @ENDERECO_COMPLETO
END


SELECT * FROM [TABELA DE CLIENTES]

SELECT CPF, [dbo].[EnderecoCompleto](ENDERECO,BAIRRO, CIDADE, ESTADO, CEP) AS 'END. COMPLETO'
FROM [TABELA DE CLIENTES]

--ALTERANDO  A FUNCAO
ALTER FUNCTION EnderecoCompleto
(@ENDERECO VARCHAR (100), @BAIRRO VARCHAR (20) ,@CIDADE VARCHAR (50), @ESTADO VARCHAR (50), @CEP VARCHAR (20)) RETURNS VARCHAR (250)
AS
BEGIN 
	DECLARE @ENDERECO_COMPLETO VARCHAR (250)
	SET @ENDERECO_COMPLETO = @ENDERECO + ' , '+ @BAIRRO + ' , ' + @CIDADE + ' , ' + @ESTADO + ' , ' + @CEP
	
	RETURN @ENDERECO_COMPLETO
END



SELECT CPF, [dbo].[EnderecoCompleto](ENDERECO,BAIRRO, CIDADE, ESTADO, CEP) AS 'END. COMPLETO'
FROM [TABELA DE CLIENTES]



-------------------------------DESAFIO 04 DA AULA 19 --------------------

SELECT DATA, COUNT(*) AS NUMERO FROM [TABELA DE NOTAS FISCAIS]
WHERE DATA >= '20170101' AND DATA <= '20170110'
GROUP BY DATA


ALTER FUNCTION FuncTabelaNotas ( @DATAINICIAL AS DATE, @DATAFINAL AS DATE) RETURNS TABLE
RETURN 
	SELECT DATA, COUNT(*) AS NUMERO FROM [TABELA DE NOTAS FISCAIS]
	WHERE DATA >= @DATAINICIAL AND DATA <= @DATAFINAL
	GROUP BY DATA



	SELECT * FROM [dbo].[FuncTabelaNotas]('20170101','20170110')

--------------------EXCLUINDO UMA FUNCAO ----------------------------


CREATE FUNCTION [dbo].[EnderecoCompleto3] 
(@ENDERECO VARCHAR(100), @CIDADE VARCHAR(50), @ESTADO VARCHAR(50), @CEP VARCHAR(20))
RETURNS VARCHAR(250)
AS
BEGIN
   DECLARE @ENDERECO_COMPLETO VARCHAR(250)
   SET @ENDERECO_COMPLETO = @ENDERECO + ', ' + @CIDADE + ', ' + @ESTADO + ', ' + @CEP
   RETURN @ENDERECO_COMPLETO
END


DROP FUNCTION [dbo].[EnderecoCompleto3] 

-------------- AULA 20 - STORED PROCEDURE -------------------------------------------
--EXEMPLO 1 - STORED PROCEDURE

CREATE PROCEDURE BuscaPorEntidades @ENTIDADE AS VARCHAR(10)
AS
BEGIN
IF @ENTIDADE = 'CLIENTES'
  SELECT [CPF] AS 'IDENTIFICADOR', [NOME] AS 'DESCRITOR', [BAIRRO] AS 'BAIRRO' FROM [TABELA DE CLIENTES]
ELSE IF @ENTIDADE = 'VENDEDORES'
  SELECT [MATRICULA] AS 'IDENTIFICADOR', [NOME] AS 'DESCRITOR',   [BAIRRO] AS 'BAIRRO' FROM [TABELA DE VENDEDORES]
END

EXEC BuscaPorEntidades @ENTIDADE = 'CLIENTES'
EXEC BuscaPorEntidades @ENTIDADE = 'VENDEDORES'

----------------- DESAFIO 01 DA AULA 20 ---------------------

CREATE PROCEDURE BuscaPorEntidadesCompleta @ENTIDADE AS VARCHAR(10)
AS
BEGIN
IF @ENTIDADE = 'CLIENTES'
    SELECT [CPF] AS 'IDENTIFICADOR', [NOME] AS 'DESCRITOR' 
	FROM [TABELA DE CLIENTES]
ELSE IF @ENTIDADE = 'VENDEDORES'
    SELECT [MATRICULA] AS 'IDENTIFICADOR', [NOME] AS 'DESCRITOR' 
    FROM [TABELA DE VENDEDORES]
ELSE IF @ENTIDADE = 'PRODUTOS'
    SELECT [CODIGO DO PRODUTO] AS 'IDENTIFICADOR', [NOME DO PRODUTO]AS 'DESCRITOR' 
	FROM [TABELA DE PRODUTOS]
END

EXEC BuscaPorEntidadesCompleta @ENTIDADE = 'CLIENTES'
EXEC BuscaPorEntidadesCompleta @ENTIDADE = 'VENDEDORES'
EXEC BuscaPorEntidadesCompleta @ENTIDADE = 'PRODUTOS'


---------- EXEMPLO 02 - CALCULA IDADE ----------------------
--CRIA A PROCEDURE
CREATE PROCEDURE CalculaIdade
AS
BEGIN
   UPDATE [TABELA DE CLIENTES] SET IDADE = DATEDIFF(YEAR, [DATA DE NASCIMENTO], GETDATE())
END

--INSERINDO UM NOVO REGISTRO
INSERT INTO [TABELA DE CLIENTES] (CPF, [NOME], [ENDERECO], BAIRRO, CIDADE, ESTADO, CEP, 
[DATA DE NASCIMENTO],SEXO, [LIMITE DE CREDITO], [VOLUME DE COMPRA], [PRIMEIRA COMPRA])
VALUES
('123123124','Denyson Oliveira', 'Rua das Mangueiras','MADUREIRA','Rio de Janeiro','RJ','20000',
'20000708','M',120000, 120000, 120000)

--TESTANDO 
SELECT * FROM [TABELA DE CLIENTES] 
WHERE CPF = '123123124'

--DELETANDO O REGISTRO DE TESTE
DELETE FROM [TABELA DE CLIENTES]
WHERE CPF = '123123124'

EXEC CalculaIdade

--VERIFICANDO NA TABELA
SELECT NOME,[DATA DE NASCIMENTO],IDADE FROM [TABELA DE CLIENTES]

--------------------- DESAFIO 02 DA AULA 20 -------------------------------------


SELECT * FROM [TABELA DE NOTAS FISCAIS]

SELECT * FROM [TABELA DE ITENS NOTAS FISCAIS]

SELECT * FROM [TABELA DE NOTAS FISCAIS] NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON TP.[CODIGO DO PRODUTO] = INF.[CODIGO DO PRODUTO]

SELECT * FROM [TABELA DE PRODUTOS]


SELECT * FROM [TABELA DE NOTAS FISCAIS] NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON TP.[CODIGO DO PRODUTO] = INF.[CODIGO DO PRODUTO]
WHERE MONTH(NF.DATA) = 1 AND YEAR (NF.DATA) = 2015 AND TP.EMBALAGEM = 'Lata'

--ANALISE
UPDATE NF 
SET NF.IMPOSTO = 0.18
FROM [TABELA DE NOTAS FISCAIS] NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON TP.[CODIGO DO PRODUTO] = INF.[CODIGO DO PRODUTO]
WHERE MONTH(NF.DATA) = 1 AND YEAR (NF.DATA) = 2015 AND TP.EMBALAGEM = 'Lata'

--PROCEDURE
CREATE PROCEDURE AtualizaImposto 
@MES INT, @ANO INT, @EMBALAGEM VARCHAR (10), @IMPOSTO FLOAT
AS
	UPDATE NF 
	SET NF.IMPOSTO = @IMPOSTO
	FROM [TABELA DE NOTAS FISCAIS] NF
	INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
	ON NF.NUMERO = INF.NUMERO
	INNER JOIN [TABELA DE PRODUTOS]TP
	ON TP.[CODIGO DO PRODUTO] = INF.[CODIGO DO PRODUTO]
	WHERE MONTH(NF.DATA) = @MES AND YEAR (NF.DATA) = @ANO AND TP.EMBALAGEM = @EMBALAGEM


EXEC AtualizaImposto @MES=2, @ANO=2017, @EMBALAGEM='Pet', @IMPOSTO = 0.16



SELECT TP.EMBALAGEM,NF.DATA,NF.IMPOSTO  FROM [TABELA DE NOTAS FISCAIS] NF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
INNER JOIN [TABELA DE PRODUTOS]TP
ON TP.[CODIGO DO PRODUTO] = INF.[CODIGO DO PRODUTO]
WHERE MONTH(NF.DATA) = 2 AND YEAR (NF.DATA) = 2017 AND TP.EMBALAGEM = 'Pet'

-------EXEMPLO 03 - PROCEDURE DE SISTEMA

EXEC sp_columns @TABLE_NAME = 'TABELA DE CLIENTES', @TABLE_OWNER = 'dbo'

EXEC sp_tables @TABLE_NAME = 'TAB%', @TABLE_OWNER =  'dbo', @TABLE_QUALIFIER = 'ESQUINA_VENDAS'

------ EXEMPLO 04 - SPs COM INTERFACES - ENTRADA ESCALAR -----------------------

--TABELA
SELECT * FROM [TABELA DE NOTAS FISCAIS]

--ANALISE 
SELECT * FROM [TABELA DE NOTAS FISCAIS]
WHERE CPF = '19290992743' AND DATA >= '20160101' AND DATA <= '20161231'


--CRIACAO DA PROCEDURE
CREATE PROCEDURE BuscaNotasClientes
@CPF VARCHAR (12),
--PADRAO
@DATA_INICIAL DATE = '20160101',
--PADRAO
@DATA_FINAL DATE = '20161231'
AS
	BEGIN
		
		SELECT * FROM [TABELA DE NOTAS FISCAIS]
		WHERE CPF = @CPF AND DATA >= @DATA_INICIAL AND DATA <= @DATA_FINAL

	END

--DEFININDO OS PARAMETROS
EXEC BuscaNotasClientes @CPF = '19290992743'
EXEC BuscaNotasClientes @CPF = '19290992743', @DATA_INICIAL = '20160101'
EXEC BuscaNotasClientes @CPF = '19290992743', @DATA_INICIAL = '20151231'
EXEC BuscaNotasClientes @CPF = '19290992743', @DATA_FINAL = '20161231'
EXEC BuscaNotasClientes @CPF = '19290992743', @DATA_FINAL = '20171231'
EXEC BuscaNotasClientes @DATA_FINAL = '20171231', @CPF = '19290992743',@DATA_INICIAL = '20151231'

--SEM DEFINICAO
EXEC BuscaNotasClientes '19290992743'
EXEC BuscaNotasClientes '19290992743','20160101'
EXEC BuscaNotasClientes '19290992743',DEFAULT,'20171231'

---------- EXEMPLO 05 - SPs COM INTERFACES - ENTRADA DE TABELA -----------------------

--TABELAS
SELECT * FROM [TABELA DE CLIENTES]

SELECT * FROM [TABELA DE NOTAS FISCAIS]

SELECT *FROM [TABELA DE ITENS NOTAS FISCAIS]

--ANALISE
SELECT TC.CPF,TC.NOME, SUM (INF.QUANTIDADE*INF.PRECO) FROM [TABELA DE CLIENTES]TC
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON TC.CPF = NF.CPF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
WHERE YEAR (NF.DATA) = 2018
GROUP BY TC.CPF,TC.NOME

--TIPO (TYPE)
--CRIA TIPO
CREATE  TYPE IDENTIFICADORES
FROM VARCHAR (20) NOT NULL

DROP TYPE IDENTIFICADORES

DECLARE @TESTE IDENTIFICADORES
SET @TESTE = 'TESTANDO ...'
PRINT @TESTE


CREATE TYPE ListaClientes as TABLE
(CPF VARCHAR (12) NOT NULL)

-- ANALISE 2
DECLARE @LISTA ListaClientes
INSERT INTO @LISTA (CPF) VALUES ('8502682733'),('8719655770'),('9283760794')
SELECT * FROM @LISTA


--PEGANDO O CPF
--SELECT * FROM [TABELA DE CLIENTES]

------ ANALISE 3
DECLARE @LISTA ListaClientes
INSERT INTO @LISTA (CPF) VALUES ('8502682733'),('8719655770'),('9283760794')

SELECT TC.CPF,TC.NOME, SUM (INF.QUANTIDADE*INF.PRECO) FROM [TABELA DE CLIENTES]TC
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON TC.CPF = NF.CPF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO
INNER JOIN @LISTA L
ON L.CPF = TC.CPF
WHERE YEAR (NF.DATA) = 2018
GROUP BY TC.CPF,TC.NOME



--CRIACAO DA PROCEDURE
CREATE PROCEDURE FaturamentoClientes
@LISTA ListaClientes READONLY,
@ANO INT
AS
	SELECT TC.CPF,TC.NOME, SUM (INF.QUANTIDADE*INF.PRECO) FROM [TABELA DE CLIENTES]TC
	INNER JOIN [TABELA DE NOTAS FISCAIS]NF
	ON TC.CPF = NF.CPF
	INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
	ON NF.NUMERO = INF.NUMERO
	INNER JOIN @LISTA L
	ON L.CPF = TC.CPF
	WHERE YEAR (NF.DATA) = @ANO
	GROUP BY TC.CPF,TC.NOME


-- TESTANDO A PROCEDURE
DECLARE @LISTA ListaClientes
INSERT INTO @LISTA (CPF) VALUES ('8502682733'),('8719655770'),('9283760794')

EXEC FaturamentoClientes @LISTA = @LISTA,@ANO = 2015

	
-------------------------------------- DESAFIO 03 DA AULA 20 ------------------------------------------

--CONSULTA DO DESAFIO 
SELECT DATA, COUNT(*) AS NUMERO FROM [NOTAS FISCAIS]
WHERE DATA IN (SELECT DATANOTA FROM @ListaDatas)
GROUP BY DATA





--Criando uma estrutura do tipo TYPE:
CREATE TYPE ListaDatas as TABLE (
    DATANOTA date NOT NULL
)
GO
-- Criando a SP usando este tipo como parâmetro e executando a consulta definida no enunciado:


SELECT * FROM [TABELA DE NOTAS FISCAIS]

DECLARE @LISTADATAS  ListaDatas
INSERT INTO @ListaDatas (DATANOTA) VALUES ('2015-01-01'), ('2015-01-02'), ('2015-01-03')
SELECT DATANOTA FROM  @LISTADATAS
GO




----------------------------------------------------------------------------------------
DECLARE @LISTADATAS  ListaDatas
INSERT INTO @ListaDatas (DATANOTA) VALUES ('2015-01-01'), ('2015-01-02'), ('2015-01-03')

SELECT DATA, COUNT(*) AS 'NUMERO DE NOTAS' FROM [TABELA DE NOTAS FISCAIS]
WHERE DATA IN (SELECT DATANOTA FROM @LISTADATAS)
GROUP BY DATA
GO


--- CRIACAO DA PROCUDERE
CREATE PROCEDURE ListaNumeroNotas 
@LISTADATAS ListaDatas READONLY 
AS
	SELECT DATA, COUNT(*) AS NUMERO FROM [TABELA DE NOTAS FISCAIS]
    WHERE DATA IN (SELECT DATANOTA FROM @LISTADATAS)
	GROUP BY DATA
GO
-- TESTANDO A PROCEDURE
DECLARE @LISTADATAS ListaDatas
INSERT INTO @ListaDatas (DATANOTA) VALUES ('20180101'),('20180102'), ('20180103')

EXEC ListaNumeroNotas @LISTADATAS=@LISTADATAS

-- EXEMPLO 6 - SPs COM PARAMETRO DE SAIDA


--PRIMEIRA CONSULTA
SELECT COUNT (*) FROM [TABELA DE NOTAS FISCAIS]
WHERE CPF = '19290992743' AND YEAR(DATA) = 2016

SELECT * FROM [TABELA DE NOTAS FISCAIS]

--SEGUNDA CONSULTA
SELECT SUM (QUANTIDADE * PRECO)  FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
WHERE CPF = '19290992743' AND YEAR(DATA) = 2016



--ANALISE
SELECT COUNT (*) FROM [TABELA DE NOTAS FISCAIS]
WHERE CPF = '19290992743' AND YEAR(DATA) = 2016

SELECT SUM (QUANTIDADE * PRECO)  FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
WHERE CPF = '19290992743' AND YEAR(DATA) = 2016

-- CRIACAO DA PROCEDERE
CREATE PROCEDURE RetornaValores
@CPF VARCHAR (12),
@ANO INT,
--PASSANDO COMO REFERENCIA
@NUM_NOTAS INT OUTPUT,
@FATURAMENTO FLOAT OUTPUT
AS
	BEGIN
			SELECT @NUM_NOTAS = COUNT (*) FROM [TABELA DE NOTAS FISCAIS]
			WHERE CPF = @CPF AND YEAR(DATA) = @ANO

			SELECT @FATURAMENTO =  SUM (QUANTIDADE * PRECO)  FROM [TABELA DE ITENS NOTAS FISCAIS]INF
			INNER JOIN [TABELA DE NOTAS FISCAIS]NF
			ON INF.NUMERO = NF.NUMERO
			WHERE CPF = @CPF AND YEAR(DATA) = @ANO

	END
GO

--TESTANDO A PROCEDURE
DECLARE @NUMERO_NOTAS INT, @FATURAMENTO FLOAT 
DECLARE @CPF VARCHAR (12), @ANO INT

SET @CPF = '19290992743'
SET @ANO = 2017

EXEC RetornaValores @CPF=@CPF,@ANO=@ANO,@NUM_NOTAS=@NUMERO_NOTAS OUTPUT,@FATURAMENTO=@FATURAMENTO OUTPUT

SELECT @NUMERO_NOTAS,@FATURAMENTO

------------- DESAFIO 04 DA AULA 20 ----------------------- (FORMS DO DIA 16)



CREATE PROCEDURE NumNotasSP
@DATA_INICIAL  DATE,
@DATA_FINAL DATE,
@NUMNOTAS  INT OUTPUT
AS
BEGIN
    DECLARE @AUX INT 
	SET @NUMNOTAS = 0
	
	WHILE @DATA_INICIAL <= @DATA_FINAL
			BEGIN
			 
				 SELECT @AUX = COUNT(*) FROM [TABELA DE NOTAS FISCAIS] 
				 WHERE [DATA] = @DATA_INICIAL
			 
				SET @NUMNOTAS = @NUMNOTAS+@AUX
				SELECT @DATA_INICIAL = DATEADD(DAY,1,@DATA_INICIAL)	
			
			END
END
GO

DECLARE @NUMNOTAS INT
DECLARE @DATA_INICIAL DATE
DECLARE @DATA_FINAL DATE

SET @DATA_INICIAL = '20170101'
SET @DATA_FINAL = '20170102'


EXEC NumNotasSP @DATA_INICIAL = '20170101',@DATA_FINAL='20170102',@NUMNOTAS=@NUMNOTAS OUTPUT

--SELECT @NUMNOTAS AS 'NUMERO DE NOTAS'
PRINT CONVERT (VARCHAR,@NUMNOTAS) + ' NOTAS' 


------------------- AULA 21 - TRATAMENTO DE ERRO --------------------------

SELECT SUM(A.QUANTIDADE * A.[PRECO]) AS 'FATURAMENTO',
SUM(A.QUANTIDADE * A.[PRECO])/10 AS 'COMISSAO'
FROM [TABELA DE ITENS NOTAS FISCAIS] A 
INNER JOIN [TABELA DE NOTAS FISCAIS] B
ON A.NUMERO = B.NUMERO WHERE B.CPF = '1471156710' AND YEAR(B.[DATA]) = 2016




DECLARE @DENOMINADOR INT
SET @DENOMINADOR = 0

SELECT SUM(A.QUANTIDADE * A.[PRECO]) AS 'FATURAMENTO',
SUM(A.QUANTIDADE * A.[PRECO])/@DENOMINADOR AS 'COMISSAO'
FROM [TABELA DE ITENS NOTAS FISCAIS] A INNER JOIN [TABELA DE NOTAS FISCAIS] B
ON A.NUMERO = B.NUMERO WHERE B.CPF = '1471156710' AND YEAR(B.[DATA]) = 2016



CREATE PROCEDURE TrataErroZero @CPF VARCHAR(12), @ANO INT, @DENOMINADOR INT, 
@NUMERRO INT OUTPUT
AS
BEGIN
  SELECT SUM(INF.QUANTIDADE * INF.[PRECO]) AS 'FATURAMENTO',
   SUM(INF.QUANTIDADE * INF.[PRECO])/@DENOMINADOR AS 'COMISSAO'
  FROM [TABELA DE ITENS NOTAS FISCAIS]INF
  INNER JOIN [TABELA DE NOTAS FISCAIS] NF
  ON INF.NUMERO = NF.NUMERO 
  WHERE NF.CPF = @CPF AND YEAR(NF.[DATA]) = @ANO
  SELECT @NUMERRO = @@ERROR
END

DECLARE @DENOMINADOR INT
DECLARE @CPF VARCHAR(12)
DECLARE @ANO INT
DECLARE @NUMERRO INT
SET @CPF = '1471156710'
SET @ANO = 2016
SET @DENOMINADOR = 0
EXEC TrataErroZero @CPF = @CPF, @ANO = @ANO, @DENOMINADOR = @DENOMINADOR, @NUMERRO = 
@NUMERRO OUTPUT
IF @NUMERRO <> 0
 PRINT 'Houve um erro de código: ' + CONVERT(VARCHAR(30), @NUMERRO) 


 -- EXEMPLO 02 - TRATANDO ERRO COM TRY-CATCH


CREATE PROCEDURE [dbo].[TrataErroZeroTry] @CPF VARCHAR(12), @ANO INT, @DENOMINADOR INT, 
@MENSAGEM VARCHAR (50) OUTPUT
AS
BEGIN
  BEGIN TRY
		SELECT SUM(INF.QUANTIDADE * INF.[PRECO]) AS 'FATURAMENTO',
		SUM(INF.QUANTIDADE * INF.[PRECO])/@DENOMINADOR AS 'COMISSAO'
		FROM [TABELA DE ITENS NOTAS FISCAIS]INF
		INNER JOIN [TABELA DE NOTAS FISCAIS] NF
		ON INF.NUMERO = NF.NUMERO 
		WHERE NF.CPF = @CPF AND YEAR(NF.[DATA]) = @ANO
		
  END TRY

  BEGIN CATCH

		SET @MENSAGEM = 'Houve um erro número: '+ CONVERT (VARCHAR,@@ERROR)

  END CATCH

END

DECLARE @DENOMINADOR INT
DECLARE @CPF VARCHAR (12)
DECLARE @ANO INT
DECLARE @MENSAGEM VARCHAR (30)

SET @CPF = '1471156710'
SET @ANO = 2016
SET @DENOMINADOR = 0
SET @MENSAGEM = ''


EXEC TrataErroZeroTry @CPF = @CPF, @ANO = @ANO, @DENOMINADOR = @DENOMINADOR, @MENSAGEM = @MENSAGEM OUTPUT
IF @MENSAGEM <> ''
  PRINT @MENSAGEM


-- EXEMPLO 03 -ALGUMAS FUNCOES DE ERRO
CREATE PROCEDURE TratamentoErroZero3 @CPF VARCHAR (12), 
@ANO INT, @DENOMINADOR INT, @MENSAGEM VARCHAR (MAX) OUTPUT
AS
	BEGIN
		BEGIN TRY
				SELECT SUM(INF.QUANTIDADE * INF.[PRECO]) AS 'FATURAMENTO',
				SUM(INF.QUANTIDADE * INF.[PRECO])/@DENOMINADOR AS 'COMISSAO'
				FROM [TABELA DE ITENS NOTAS FISCAIS]INF
				INNER JOIN [TABELA DE NOTAS FISCAIS] NF
				ON INF.NUMERO = NF.NUMERO 
				WHERE NF.CPF = @CPF AND YEAR(NF.[DATA]) = @ANO
		END TRY

		BEGIN CATCH
				SET @MENSAGEM = 'HOUVE UM ERRO NÚMERO: '+ CONVERT (VARCHAR,ERROR_NUMBER())+' - '
				SET @MENSAGEM =  @MENSAGEM + 'MENSAGEM: '+ ERROR_MESSAGE() + ' - '
				SET @MENSAGEM = @MENSAGEM + 'GRAU DE SEVERIDADE DO ERRO: ' + CONVERT (VARCHAR,ERROR_SEVERITY()) + ' - '
				SET @MENSAGEM = @MENSAGEM + 'ESTADO DO ERRO: ' + CONVERT (VARCHAR,ERROR_STATE()) + ' - '
				SET @MENSAGEM = @MENSAGEM + 'NUMERO DA LINHA: ' + CONVERT(VARCHAR, ERROR_LINE()) + ' - '
				SET @MENSAGEM = @MENSAGEM + 'PROCEDURE: ' + ERROR_PROCEDURE()

		END CATCH


	END
	GO

	--TESTANDO A PROCEDURE 
	DECLARE @DENOMINADOR INT
	DECLARE @CPF VARCHAR (12)
	DECLARE @ANO INT
	DECLARE @MENSAGEM VARCHAR (MAX)

	SET @CPF = '1471156710'
	SET @DENOMINADOR = 0
	SET @ANO = 2016
	SET @MENSAGEM = ''

	EXEC TratamentoErroZero3 @CPF = @CPF, @ANO = @ANO ,@DENOMINADOR = @DENOMINADOR,@MENSAGEM = @MENSAGEM OUTPUT
	IF @MENSAGEM <> ''
	PRINT @MENSAGEM


---------------------- AULA 22 - CURSOR ------------------------------------------------------------

--EXEMPLO 1: DEFINICAO DE CURSOR
DECLARE @NOME VARCHAR (200) 
DECLARE CURSOR1 CURSOR FOR SELECT TOP 5 NOME FROM [TABELA DE CLIENTES]
OPEN CURSOR1
FETCH NEXT FROM CURSOR1 INTO @NOME
WHILE @@FETCH_STATUS = 0
	BEGIN

		PRINT @NOME
		FETCH NEXT FROM CURSOR1 INTO @NOME

	END
CLOSE CURSOR1
DEALLOCATE CURSOR1

-- EXEMPLO 2 : ACESSANDO MAIS DE UM CAMPO
DECLARE @NOME VARCHAR(200)
DECLARE @ENDERECO VARCHAR(MAX)
DECLARE CURSOR1 CURSOR FOR 
SELECT NOME, (ENDERECO + ' - ' + BAIRRO + ' - ' + CIDADE + ' - ' + ESTADO + ' - ' + CEP) AS  'ENDCOMPLETO' 
FROM [TABELA DE CLIENTES]
OPEN CURSOR1
FETCH NEXT FROM CURSOR1 INTO @NOME, @ENDERECO
WHILE @@FETCH_STATUS = 0
BEGIN
  PRINT @NOME + ' Endereço: ' + @ENDERECO
  FETCH NEXT FROM CURSOR1 INTO @NOME, @ENDERECO
END
CLOSE CURSOR1
DEALLOCATE CURSOR1

-- EXEMPLO 3: CRIANDO DADOS ALEATORIOS COMPLETO (CRIAR VENDAS ALEATORIAS) 
--(CRIANDO REGISTRO NA TAB. NOTAS FISCAIS E NA TAB. ITENS DE NOTAS FISCAIS)

--PASSO 1: CRIAR UMA FUNCAO 

--ANALISANDO A FUNCAO RAND
SELECT RAND()

--VALOR MINIMO = 100
--VALOR MAXIMO = 500

SELECT ROUND (((500 - 100) * RAND() + 100),0)

--FUNCAO COM ERRO
CREATE FUNCTION NumeroAleatorio (@VALOR_INIC INT, @VALOR_FINAL INT) RETURNS INT
AS
	BEGIN
		DECLARE @ALEATORIO INT
		SELECT @ALEATORIO =  ROUND (((500 - 100) * RAND() + 100),0)
		RETURN @ALEATORIO
		
	END

-- CRIACAO DA VIEW
CREATE VIEW VW_ALEATORIO
AS
SELECT RAND() AS 'VALOR ALEATORIO'


SELECT * FROM VW_ALEATORIO

GO
--CRIACAO DA FUNCAO
CREATE FUNCTION NumeroAleatorio (@VALOR_INIC INT, @VALOR_FINAL INT) RETURNS INT
AS
	BEGIN
		DECLARE @ALEATORIO INT
		DECLARE @ALEATORIA_FLOAT FLOAT
		SELECT @ALEATORIA_FLOAT = [VALOR ALEATORIO] FROM VW_ALEATORIO

		SELECT @ALEATORIO =  ROUND (((@VALOR_FINAL - @VALOR_INIC) * @ALEATORIA_FLOAT + @VALOR_INIC),0)
		RETURN @ALEATORIO
		
	END

	SELECT DBO.NumeroAleatorio(100,500)
GO
--PASSO 2:  CLIENTE, VENDEDORES E PRODUTOS ALEATORIOS

--SELECT * FROM [TABELA DE CLIENTES]

--DECLARACAO DAS NOSSAS VARIAVEIS PRINCIPAIS
DECLARE @CLIENTE_ALEATORIO VARCHAR (12)
DECLARE @VENDEDOR_ALEATORIO VARCHAR (12)
DECLARE @PRODUTO_ALEATORIO VARCHAR (12)
DECLARE @VAL_INICIAL INT
DECLARE @VAL_FINAL INT
DECLARE @ALEATORIO INT
DECLARE @CONTADOR INT

SET @CONTADOR = 1
SET @VAL_INICIAL = 1
SELECT @VAL_FINAL =  COUNT (*) FROM [TABELA DE CLIENTES]
SET @ALEATORIO = DBO.NumeroAleatorio (@VAL_INICIAL,@VAL_FINAL)
--CURSOR DO CLIENTE
DECLARE CURSOR1 CURSOR FOR
SELECT CPF FROM [TABELA DE CLIENTES]
OPEN CURSOR1
FETCH NEXT FROM CURSOR1 INTO @CLIENTE_ALEATORIO
WHILE @CONTADOR < @ALEATORIO
	BEGIN
		FETCH NEXT FROM CURSOR1 INTO @CLIENTE_ALEATORIO
		SET @CONTADOR = @CONTADOR + 1
	END
CLOSE CURSOR1
DEALLOCATE CURSOR1
SELECT @CLIENTE_ALEATORIO

--VENDEDOR ALEATORIO
SET @CONTADOR = 1
SET @VAL_INICIAL = 1
SELECT @VAL_FINAL =  COUNT (*) FROM [TABELA DE VENDEDORES]
SET @ALEATORIO = DBO.NumeroAleatorio (@VAL_INICIAL,@VAL_FINAL)

--CURSOR DO VENDEDOR
DECLARE CURSOR1 CURSOR FOR
SELECT MATRICULA FROM [TABELA DE VENDEDORES]
OPEN CURSOR1
FETCH NEXT FROM CURSOR1 INTO @VENDEDOR_ALEATORIO
WHILE @CONTADOR < @ALEATORIO
	BEGIN
		FETCH NEXT FROM CURSOR1 INTO @VENDEDOR_ALEATORIO
		SET @CONTADOR = @CONTADOR + 1
	END
CLOSE CURSOR1
DEALLOCATE CURSOR1

SELECT @VENDEDOR_ALEATORIO

-- PRODUTO ALEATORIO
SET @CONTADOR = 1
SET @VAL_INICIAL = 1
SELECT @VAL_FINAL =  COUNT (*) FROM [TABELA DE PRODUTOS]
SET @ALEATORIO = DBO.NumeroAleatorio (@VAL_INICIAL,@VAL_FINAL)

--CURSOR DO PRODUTO
DECLARE CURSOR1 CURSOR FOR
SELECT [CODIGO DO PRODUTO] FROM [TABELA DE PRODUTOS]
OPEN CURSOR1
FETCH NEXT FROM CURSOR1 INTO @PRODUTO_ALEATORIO
WHILE @CONTADOR < @ALEATORIO
	BEGIN
		FETCH NEXT FROM CURSOR1 INTO @PRODUTO_ALEATORIO
		SET @CONTADOR = @CONTADOR + 1
	END
CLOSE CURSOR1
DEALLOCATE CURSOR1

SELECT @PRODUTO_ALEATORIO

--PASSO 3: CRIANDO UMA FUNCAO PARA OBTER DADOS DAS ENTIDADES
CREATE FUNCTION EntidadeAleatoria (@TIPO VARCHAR (12)) RETURNS VARCHAR (20)
AS
	BEGIN
		DECLARE @ENTIDADE_ALEATORIO VARCHAR (12)
		DECLARE @TABELA TABLE (CODIGO VARCHAR (20)) --TABELA TEMPORARIA
		DECLARE @VAL_INICIAL INT
		DECLARE @VAL_FINAL INT
		DECLARE @ALEATORIO INT
		DECLARE @CONTADOR INT

		IF @TIPO = 'CLIENTE'
			BEGIN
				INSERT INTO @TABELA (CODIGO) SELECT CPF AS 'CODIGO' FROM [TABELA DE CLIENTES]
			END
		IF @TIPO = 'VENDEDOR'
			BEGIN
				INSERT INTO @TABELA (CODIGO) SELECT MATRICULA AS 'CODIGO' FROM [TABELA DE VENDEDORES]
			END
		IF @TIPO = 'PRODUTO'
			BEGIN
				INSERT INTO @TABELA (CODIGO) SELECT [CODIGO DO PRODUTO] AS 'CODIGO' FROM [TABELA DE PRODUTOS] 
			END
		
		--SETs
		SET @CONTADOR = 1
		SET @VAL_INICIAL = 1
		SELECT @VAL_FINAL =  COUNT (*) FROM @TABELA
		SET @ALEATORIO = DBO.NumeroAleatorio (@VAL_INICIAL,@VAL_FINAL)

		--CURSOR
		DECLARE CURSOR1 CURSOR FOR
		
		SELECT CODIGO FROM @TABELA
		
		OPEN CURSOR1
		FETCH NEXT FROM CURSOR1 INTO @ENTIDADE_ALEATORIO
		WHILE @CONTADOR < @ALEATORIO
			BEGIN
				FETCH NEXT FROM CURSOR1 INTO @ENTIDADE_ALEATORIO
				SET @CONTADOR = @CONTADOR + 1
			END
		CLOSE CURSOR1
		DEALLOCATE CURSOR1

		RETURN @ENTIDADE_ALEATORIO

	END

SELECT [dbo].[EntidadeAleatoria]('CLIENTE')

SELECT [dbo].[EntidadeAleatoria]('CLIENTE'),[dbo].[EntidadeAleatoria]('PRODUTO'),[dbo].[EntidadeAleatoria]('VENDEDOR')
GO
--PASSO 4: OUTROS DADOS DA NOTA FISCAL  (ANALISE)
DECLARE @CLIENTE VARCHAR (20)
DECLARE @VENDEDOR VARCHAR (20)
DECLARE @PRODUTO VARCHAR (20)
DECLARE @DATA DATE
DECLARE @NUMERO INT
DECLARE @IMPOSTO FLOAT
DECLARE @NUM_ITENS INT
DECLARE @QUANTIDADE INT
DECLARE @PRECO FLOAT
DECLARE @CONTADOR INT

-- CABECALHO DA NOTA FISCAL
SET @DATA = '20210621'
SET @CLIENTE = [dbo].[EntidadeAleatoria]('CLIENTE')
SET @VENDEDOR = [dbo].[EntidadeAleatoria]('VENDEDOR')
SELECT @NUMERO = MAX(NUMERO) + 1  FROM [TABELA DE NOTAS FISCAIS]
SET @IMPOSTO = 0.18

--ITENS DA NOTA FISCAL
SET @NUM_ITENS = DBO.NumeroAleatorio (2,10)
SET @CONTADOR = 1

--ANALISE DO CABECALHO 
PRINT 'CABECALHO'
PRINT @DATA
PRINT @CLIENTE
PRINT @VENDEDOR
PRINT @IMPOSTO
PRINT @NUMERO
PRINT ''

--ITENS
PRINT 'ITENS'
WHILE @CONTADOR <= @NUM_ITENS
	BEGIN
		SET @PRODUTO =[dbo].[EntidadeAleatoria]('PRODUTO')
		SET @QUANTIDADE = DBO.NumeroAleatorio(5,100)
		SELECT @PRECO = [PRECO DE LISTA] FROM [TABELA DE PRODUTOS]

		PRINT @NUMERO
		PRINT @PRODUTO
		PRINT @QUANTIDADE
		PRINT @PRECO
		PRINT ''
		SET @CONTADOR = @CONTADOR + 1
		
	END
GO

--PASSO 5: INCLUINDO NA TABELA 
DECLARE @CLIENTE VARCHAR (20)
DECLARE @VENDEDOR VARCHAR (20)
DECLARE @PRODUTO VARCHAR (20)
DECLARE @DATA DATE
DECLARE @NUMERO INT
DECLARE @IMPOSTO FLOAT
DECLARE @NUM_ITENS INT
DECLARE @QUANTIDADE INT
DECLARE @PRECO FLOAT
DECLARE @CONTADOR INT

-- CABECALHO DA NOTA FISCAL
SET @DATA = '20210621'
SET @CLIENTE = [dbo].[EntidadeAleatoria]('CLIENTE')
SET @VENDEDOR = [dbo].[EntidadeAleatoria]('VENDEDOR')
SELECT @NUMERO =  MAX(CONVERT (INT,NUMERO)) + 1   FROM [TABELA DE NOTAS FISCAIS]

SET @IMPOSTO = 0.18

--ITENS DA NOTA FISCAL
SET @NUM_ITENS = DBO.NumeroAleatorio (2,10)
SET @CONTADOR = 1

INSERT INTO [TABELA DE NOTAS FISCAIS] (CPF,MATRICULA,DATA,NUMERO,IMPOSTO)
VALUES (@CLIENTE,@VENDEDOR,@DATA,@NUMERO,@IMPOSTO)

WHILE @CONTADOR <= @NUM_ITENS
	BEGIN
		SET @PRODUTO =[dbo].[EntidadeAleatoria]('PRODUTO')
		SET @QUANTIDADE = DBO.NumeroAleatorio(5,100)
		SELECT @PRECO = [PRECO DE LISTA] FROM [TABELA DE PRODUTOS]

		INSERT INTO [TABELA DE ITENS NOTAS FISCAIS] (NUMERO,[CODIGO DO PRODUTO],QUANTIDADE,PRECO)
		VALUES (@NUMERO,@PRODUTO,@QUANTIDADE,@PRECO)

		SET @CONTADOR = @CONTADOR + 1
		
	END

	GO

-- PASSO 6 RESOLVENDO PROBLEMA DE PK
DECLARE @CLIENTE VARCHAR (20)
DECLARE @VENDEDOR VARCHAR (20)
DECLARE @PRODUTO VARCHAR (20)
DECLARE @DATA DATE
DECLARE @NUMERO INT
DECLARE @IMPOSTO FLOAT
DECLARE @NUM_ITENS INT
DECLARE @QUANTIDADE INT
DECLARE @PRECO FLOAT
DECLARE @CONTADOR INT
DECLARE @LISTA_PRODUTOS TABLE (PRODUTO VARCHAR (20))
DECLARE @AUX_PRODUTO INT


-- CABECALHO DA NOTA FISCAL
SET @DATA = '20210621'
SET @CLIENTE = [dbo].[EntidadeAleatoria]('CLIENTE')
SET @VENDEDOR = [dbo].[EntidadeAleatoria]('VENDEDOR')
SELECT @NUMERO =  MAX(CONVERT (INT,NUMERO)) + 1   FROM [TABELA DE NOTAS FISCAIS]

SET @IMPOSTO = 0.18

--ITENS DA NOTA FISCAL
SET @NUM_ITENS = DBO.NumeroAleatorio (2,10)
SET @CONTADOR = 1

INSERT INTO [TABELA DE NOTAS FISCAIS] (CPF,MATRICULA,DATA,NUMERO,IMPOSTO)
VALUES (@CLIENTE,@VENDEDOR,@DATA,@NUMERO,@IMPOSTO)


WHILE @CONTADOR <= @NUM_ITENS
	BEGIN
		SET @PRODUTO =[dbo].[EntidadeAleatoria]('PRODUTO')
		SELECT @AUX_PRODUTO =  COUNT (*) FROM @LISTA_PRODUTOS 
		WHERE PRODUTO = @PRODUTO

		IF (@AUX_PRODUTO = 0)

			BEGIN 
					SET @QUANTIDADE = DBO.NumeroAleatorio(5,100)
					SELECT @PRECO = [PRECO DE LISTA] FROM [TABELA DE PRODUTOS]

					INSERT INTO [TABELA DE ITENS NOTAS FISCAIS] (NUMERO,[CODIGO DO PRODUTO],QUANTIDADE,PRECO)
					VALUES (@NUMERO,@PRODUTO,@QUANTIDADE,@PRECO)

					SET @CONTADOR = @CONTADOR + 1

			END
			INSERT INTO @LISTA_PRODUTOS (PRODUTO)
			VALUES (@PRODUTO)

		
		
	END


--ANALISE - PEGANDO A QTD. DE REGISTROS DA TABELA
--VALOR_INICIAL = 1
--VALOR_FINAL = 
SELECT COUNT (*) FROM [TABELA DE CLIENTES]

SELECT CPF FROM [TABELA DE CLIENTES]


------------------------------------**** END ****--------------------------------------------------------------------
-- CRIACAO DA PROCEDURE DO DESAFIO  DO DIA 21.06.2021 -------------


CREATE PROCEDURE CriarNotaFiscal 
@DATA AS DATE
	BEGIN

			DECLARE @CLIENTE VARCHAR (20)
			DECLARE @VENDEDOR VARCHAR (20)
			DECLARE @PRODUTO VARCHAR (20)
			DECLARE @DATA DATE
			DECLARE @NUMERO INT
			DECLARE @IMPOSTO FLOAT
			DECLARE @NUM_ITENS INT
			DECLARE @QUANTIDADE INT
			DECLARE @PRECO FLOAT
			DECLARE @CONTADOR INT
			DECLARE @LISTA_PRODUTOS TABLE (PRODUTO VARCHAR (20))
			DECLARE @AUX_PRODUTO INT


			-- CABECALHO DA NOTA FISCAL
			SET @DATA = @DATA
			SET @CLIENTE = [dbo].[EntidadeAleatoria]('CLIENTE')
			SET @VENDEDOR = [dbo].[EntidadeAleatoria]('VENDEDOR')
			SELECT @NUMERO =  MAX(CONVERT (INT,NUMERO)) + 1   FROM [TABELA DE NOTAS FISCAIS]

			SET @IMPOSTO = 0.18

			--ITENS DA NOTA FISCAL
			SET @NUM_ITENS = DBO.NumeroAleatorio (2,10)
			SET @CONTADOR = 1

			INSERT INTO [TABELA DE NOTAS FISCAIS] (CPF,MATRICULA,DATA,NUMERO,IMPOSTO)
			VALUES (@CLIENTE,@VENDEDOR,@DATA,@NUMERO,@IMPOSTO)


			WHILE @CONTADOR <= @NUM_ITENS
				BEGIN
					SET @PRODUTO =[dbo].[EntidadeAleatoria]('PRODUTO')
					SELECT @AUX_PRODUTO =  COUNT (*) FROM @LISTA_PRODUTOS 
					WHERE PRODUTO = @PRODUTO

					IF (@AUX_PRODUTO = 0)

						BEGIN 
								SET @QUANTIDADE = DBO.NumeroAleatorio(5,100)
								SELECT @PRECO = [PRECO DE LISTA] FROM [TABELA DE PRODUTOS]

								INSERT INTO [TABELA DE ITENS NOTAS FISCAIS] (NUMERO,[CODIGO DO PRODUTO],QUANTIDADE,PRECO)
								VALUES (@NUMERO,@PRODUTO,@QUANTIDADE,@PRECO)

								SET @CONTADOR = @CONTADOR + 1

						END
						INSERT INTO @LISTA_PRODUTOS (PRODUTO)
						VALUES (@PRODUTO)

					
					
				END


	END


EXEC [dbo].[CriaNotaFiscal] '20210621'
EXEC [dbo].[CriaNotaFiscal] '20210621'
EXEC [dbo].[CriaNotaFiscal] '20210621'
	


-------**************MODULO ADMINISTRADOR DE BANCO DE DADOS *************------------

--------------------  AULA 23 - INTRODUCAO E ESTRUTURA DA BASE DE DADOS ---

SELECT @@VERSION AS 'SQL Server Version'


USE ESQUINA_VENDAS

SELECT * FROM SYS.database_files


CREATE DATABASE SISTEMA_A 


USE SISTEMA_A
SELECT * FROM SYS.database_files



CREATE DATABASE SISTEMA_B 
ON PRIMARY 
( NAME = SISTEMA_B,	FILENAME = 'E:\TEMP SQL\SISTEMA_B.mdf', SIZE = 100MB, MAXSIZE=200MB,FILEGROWTH),

(NAME = SISTEMA_B_2,FILENAME = 'E:\TEMP SQL\SISTEMA_B_2.ndf', SIZE = 100MB, MAXSIZE=200MB,FILEGROWTH)

LOG ON( NAME = SISTEMA_B_LOG,	FILENAME = 'E:\TEMP SQL\SISTEMA_B_LOG.ldf', SIZE = 100MB, MAXSIZE=200MB,FILEGROWTH)


----------------------- BACKUP DO BANCO DE DADOS -----------------------------------------------

--USANDO O BANCO PARA BACKUP
USE ESQUINA_VENDAS

--BACKUP FULL
BACKUP DATABASE ESQUINA_VENDAS TO DISK = 'E:\TEMP SQL\ESQUINA_VENDAS.BAK' WITH INIT

-- BACKUP FULL COMPRIMIDO
BACKUP DATABASE ESQUINA_VENDAS TO DISK = 'E:\TEMP SQL\ESQUINA_VENDAS2.BAK' WITH  COMPRESSION 


--SIMULACAO DE VENDA DE PRODUTOS COM A PROCEDURE CriarNotaFiscal
EXEC [CriarNotaFiscal] '20210622'

--BACKUP DE LOG
BACKUP LOG ESQUINA_VENDAS TO DISK = 'E:\TEMP SQL\ESQUINA_VENDAS_LOG.BAK'

--BACKUP DE LOG COMPRIMIDO
BACKUP LOG ESQUINA_VENDAS TO DISK = 'E:\TEMP SQL\ESQUINA_VENDAS_2LOG.BAK' WITH COMPRESSION

--SIMULACAO DE VENDA DE PRODUTOS COM A PROCEDURE CriarNotaFiscal
EXEC [CriarNotaFiscal] '20210622'

--BACKUP DE LOG
BACKUP LOG ESQUINA_VENDAS TO DISK = 'E:\TEMP SQL\ESQUINA_VENDAS_P2_LOG.BAK'

-----------------------------------------------------------------------------------------------
------------  EXEMPLO 1- BACKUP DE TESTE -------------
CREATE DATABASE TESTE
USE TESTE
--PRIMEIRO INSERT --> BACKUP FULL
INSERT INTO TESTE (NOME)
VALUES ('A')
--SEGUNDO INSERT 
INSERT INTO TESTE (NOME)
VALUES ('B')

--SEGUNDO INSERT 
INSERT INTO TESTE (NOME)
VALUES ('C')

--TERCEIRO INSERT 
INSERT INTO TESTE (NOME)
VALUES ('D')

SELECT * FROM TESTE

--BACKUP FULL
BACKUP DATABASE TESTE TO DISK = 'E:\SQL\TESTE.BAK' WITH INIT
BACKUP DATABASE TESTE TO DISK = 'E:\SQL\TESTE.BAK' WITH NOINIT
--BACKUP DE TRANSACAO
BACKUP LOG TESTE TO DISK = 'E:\SQL\TESTE.BAK' WITH NOINIT 

--BACKUP DIFERENCIAL
BACKUP DATABASE TESTE TO DISK =  'E:\SQL\TESTE.BAK' WITH DIFFERENTIAL  

--VERIFICACAO DO ARQUIVO DE BACKUP
RESTORE VERIFYONLY FROM DISK = 'E:\SQL\TESTE.BAK' 

--VERIFICACO DO CAB. DO ARQUIVO
RESTORE HEADERONLY FROM DISK = 'E:\SQL\TESTE.BAK'

--MUDE DE BANCO
USE MASTER


--ALTERANDO O STATUS POR QUESTAO DE SEGURANCA SOMENTE PARA O MEU USUARIO (NINGUEM MAIS ACESSA)
ALTER DATABASE TESTE SET SINGLE_USER WITH ROLLBACK IMMEDIATE 
--PARA VOLTAR PARA VARIOS USUARIOS
--ALTER DATABASE TESTE SET MULTI_USER WITH ROLLBACK IMMEDIATE 

-- APAGANDO A BASE DE DADOS <TESTE>
DROP DATABASE TESTE

--RESTARANDO A BASE DE DADOS
RESTORE DATABASE TESTE FROM DISK = 'E:\SQL\TESTE.BAK' WITH FILE=1, NORECOVERY
RESTORE DATABASE TESTE FROM DISK = 'E:\SQL\TESTE.BAK' WITH FILE=2, NORECOVERY
RESTORE DATABASE TESTE FROM DISK = 'E:\SQL\TESTE.BAK' WITH FILE=3, RECOVERY


------------------------------------------------------------------------------------

--EXEMPLO 2

--RESTORE DATABASE TESTE FROM DISK = 'E:\SQL\TESTE.BAK' WITH FILE=3, RECOVERY

--CRIANDO UMA NOVA DE TESTE
CREATE DATABASE TESTE_BACKUP

--USE O BANCO TESTE_BACKUP
USE TESTE_BACKUP

--CRIAR UMA TABELA DE CONTROLE --
CREATE TABLE CRT_BACKUP (POS INT)

--INSERINDO REGISTRO VALOR 1
INSERT INTO CRT_BACKUP (POS) VALUES (1) --APENAS UMA VEZ

--SELECIONANDO OS REGISTROS 
SELECT * FROM CRT_BACKUP

-- 1:00 --> BACKUP FULL INICIAL
BACKUP DATABASE TESTE_BACKUP TO DISK = 'E:\SQL\TESTE_BACKUP.BAK' WITH INIT

--INSERINDO REGISTRO VALOR 2
INSERT INTO CRT_BACKUP (POS) VALUES (2) --APENAS UMA VEZ!

--4:00 --> BACKUP  LOG DE TRANSACAO
BACKUP LOG TESTE_BACKUP TO DISK = 'E:\SQL\TESTE_BACKUP.BAK' WITH NOINIT

--INSERINDO REGISTRO VALOR 3
INSERT INTO CRT_BACKUP (POS) VALUES (3) --APENAS UMA VEZ!

--6:00 --> BACKUP  LOG DE TRANSACAO
BACKUP LOG TESTE_BACKUP TO DISK = 'E:\SQL\TESTE_BACKUP.BAK' WITH NOINIT


--INSERINDO REGISTRO VALOR 4
INSERT INTO CRT_BACKUP (POS) VALUES (4) --APENAS UMA VEZ!
--8:00 --> BACKUP  LOG DE TRANSACAO
BACKUP LOG TESTE_BACKUP TO DISK = 'E:\SQL\TESTE_BACKUP.BAK' WITH NOINIT


--INSERINDO REGISTRO VALOR 5
INSERT INTO CRT_BACKUP (POS) VALUES (5) --APENAS UMA VEZ!

--9:00 --> BACKUP  DIFERENCIAL
BACKUP DATABASE TESTE_BACKUP TO DISK = 'E:\SQL\TESTE_BACKUP.BAK' WITH DIFFERENTIAL


--INSERINDO REGISTRO VALOR 6
INSERT INTO CRT_BACKUP (POS) VALUES (6) --APENAS UMA VEZ!
--10:00 --> BACKUP  LOG DE TRANSACAO
BACKUP LOG TESTE_BACKUP TO DISK = 'E:\SQL\TESTE_BACKUP.BAK' WITH NOINIT


--INSERINDO REGISTRO VALOR 7
INSERT INTO CRT_BACKUP (POS) VALUES (7) --APENAS UMA VEZ!
--12:00 --> BACKUP  LOG DE TRANSACAO
BACKUP LOG TESTE_BACKUP TO DISK = 'E:\SQL\TESTE_BACKUP.BAK' WITH NOINIT


--INSERINDO REGISTRO VALOR 8
INSERT INTO CRT_BACKUP (POS) VALUES (8) --APENAS UMA VEZ!
--14:00 --> BACKUP  LOG DE TRANSACAO
BACKUP LOG TESTE_BACKUP TO DISK = 'E:\SQL\TESTE_BACKUP.BAK' WITH NOINIT


--INSERINDO REGISTRO VALOR 9
INSERT INTO CRT_BACKUP (POS) VALUES (9) --APENAS UMA VEZ!
--14:00 --> BACKUP  DIFERENCIAL
BACKUP DATABASE TESTE_BACKUP TO DISK = 'E:\SQL\TESTE_BACKUP.BAK' WITH DIFFERENTIAL


--INSERINDO REGISTRO VALOR 10
INSERT INTO CRT_BACKUP (POS) VALUES (10) --APENAS UMA VEZ!
--15:00 --> BACKUP  LOG TRANSACAO
BACKUP LOG TESTE_BACKUP TO DISK = 'E:\SQL\TESTE_BACKUP.BAK' WITH NOINIT


--INSERINDO REGISTRO VALOR 11
INSERT INTO CRT_BACKUP (POS) VALUES (11) --APENAS UMA VEZ!
--17:00 --> BACKUP  LOG TRANSACAO
BACKUP LOG TESTE_BACKUP TO DISK = 'E:\SQL\TESTE_BACKUP.BAK' WITH NOINIT


--INSERINDO REGISTRO VALOR 12
SELECT * FROM CRT_BACKUP
INSERT INTO CRT_BACKUP (POS) VALUES (12) --APENAS UMA VEZ!
--19:00 --> BACKUP  LOG TRANSACAO
BACKUP LOG TESTE_BACKUP TO DISK = 'E:\SQL\TESTE_BACKUP.BAK' WITH NOINIT

--INSERINDO REGISTRO VALOR 13
SELECT * FROM CRT_BACKUP
INSERT INTO CRT_BACKUP (POS) VALUES (13) --APENAS UMA VEZ!
--21:00 --> BACKUP  LOG TRANSACAO
BACKUP LOG TESTE_BACKUP TO DISK = 'E:\SQL\TESTE_BACKUP.BAK' WITH NOINIT


--SIMULAR MAIS UM DIA 

-- QUEREMOS RECUPERAR OS DADOS 17:30


-- RECUPERAR PRIMEIRO O FULL (1:00)
-- DEPOIS O DIFERENCIAL MAIS PROXIMO DO HORARIO QUE DEU PROBLEMA (14:00)
-- DEPOIS OS ARQUIVOS DE TRANSACAO MAIS PROXIMO DO HORARIO (15:00,17:00)


--RESTAURACAO DO BANCO DE DADOS 
USE MASTER 


ALTER DATABASE TESTE_BACKUP SET SINGLE_USER WITH ROLLBACK IMMEDIATE

DROP DATABASE TESTE_BACKUP



RESTORE VERIFYONLY FROM DISK = 'E:\SQL\TESTE_BACKUP.BAK'

--CONSULTANDO O CABECALHO 
RESTORE HEADERONLY FROM DISK = 'E:\SQL\TESTE_BACKUP.BAK'

-- RECUPERAR PRIMEIRO O FULL (1:00)  ---> OK
-- DEPOIS O DIFERENCIAL MAIS PROXIMO DO HORARIO QUE DEU PROBLEMA (14:00)
-- DEPOIS OS ARQUIVOS DE TRANSACAO MAIS PROXIMO DO HORARIO (15:00,17:00)

--1:00 -- BACKUP FULL INICIAL 
RESTORE DATABASE TESTE_BACKUP FROM DISK = 'E:\SQL\TESTE_BACKUP.BAK' WITH FILE=1, NORECOVERY
-- 14:00 --> BACKUP DIFERENCIAL
RESTORE DATABASE TESTE_BACKUP FROM DISK = 'E:\SQL\TESTE_BACKUP.BAK' WITH FILE=9, NORECOVERY
--15:00 --> BACK TRANSACAO
RESTORE DATABASE TESTE_BACKUP FROM DISK = 'E:\SQL\TESTE_BACKUP.BAK' WITH FILE=10, NORECOVERY

--17:00 --> BACK TRANSACAO
RESTORE DATABASE TESTE_BACKUP FROM DISK = 'E:\SQL\TESTE_BACKUP.BAK' WITH FILE=11, RECOVERY

USE TESTE_BACKUP

SELECT * FROM CRT_BACKUP



--SOMENTE UM USUARIO ACESSAM O BANCO DE DADOS
ALTER DATABASE TESTE_BACKUP SET SINGLE_USER WITH ROLLBACK IMMEDIATE
--MUITOS USUARIOS ACESSAM O BANCO DE DADOS
ALTER DATABASE TESTE_BACKUP SET MULTI_USER WITH ROLLBACK IMMEDIATE



-- AULA 24 - SEGURANCA

CREATE LOGIN LAEL WITH PASSWORD = 'lael@123'

--informacoes de login
SELECT * FROM SYS.SQL_LOGINS

-- PEGANDO SOMENTE OS ATIVOS
SELECT * FROM SYS.SQL_LOGINS
WHERE is_disabled <> 1

-- INFORMACOES DE LOGIN (COMPATIBILIDADE) --> VERSOES ANTERIORES
SELECT * FROM SYS.SYSLOGINS 

--PEGAR O QUE É COMUM NO INNER JOIN
SELECT * FROM SYS.SYSLOGINS SL
INNER JOIN SYS.SQL_LOGINS L
ON SL.SID = L.SID

--PEGANDO COM LEFT JOIN
SELECT * FROM SYS.SYSLOGINS SL
LEFT JOIN SYS.SQL_LOGINS L
ON SL.SID = L.SID
WHERE L.is_disabled <> 1

--Retornando a data que a senha atual foi definida.
SELECT NAME, LOGINPROPERTY(NAME,'PasswordLastSetTime') FROM SYS.SQL_LOGINS

--SEGURANCA CRIPTOGRAFICA
-- SHA --> SECURE HASHING ALGORITHM
SELECT NAME, LOGINPROPERTY (NAME,'PasswordHash') FROM SYS.SQL_LOGINS

--TIPO DE CRIPTOGRAFIA HASH
--0 --> VERSAO  ANTIGA 
--1 --> SHA-1
--2 --> SHA-2
SELECT NAME, LOGINPROPERTY (NAME,'PasswordHashAlgorithm') AS 'TIPO HASH' FROM SYS.SQL_LOGINS


--MOSTRANDO UM POUCO SOBRE AS CRIPTOGRAFIAS
DECLARE @TABELA_HASH TABLE (TIPO NVARCHAR (32))
INSERT INTO @TABELA_HASH (TIPO)
VALUES ('123'),('TESTE_SENHA'),('123@SENHA')
SELECT
HASHBYTES('MD2',TIPO) AS 'MD2',
HASHBYTES('SHA1',TIPO) AS 'SHA1',
HASHBYTES('SHA2_256',TIPO) AS 'SHA2_256',
HASHBYTES('SHA2_512',TIPO) AS 'SHA2_512'
FROM @TABELA_HASH

--POLITICA INCORRETA DE SENHA
CREATE LOGIN ROGERIO WITH PASSWORD = 'ROGERIO'

SELECT NAME AS 'LOGIN' FROM SYS.sql_logins
--1 --> CORRESPONDENTE,		0 --> NAO CORRESPONDE (NAO EXISTE)
WHERE PWDCOMPARE (NAME,password_hash) = 1

--VERIFICACAO DE SENHA EM BRANCO
SELECT NAME AS 'LOGIN' FROM SYS.sql_logins
WHERE PWDCOMPARE ('',password_hash) = 1

--QUALQUER STRING PARA COMPARACAO
SELECT NAME AS 'LOGIN' FROM SYS.sql_logins
WHERE PWDCOMPARE ('123',password_hash) = 1

--o numero de dias que a senha expire
SELECT NAME, LOGINPROPERTY(NAME,'DaysUntilExpiration') FROM SYS.SQL_LOGINS 

--indica se o logon está bloqueado
SELECT NAME, LOGINPROPERTY(NAME,'IsLocked') FROM SYS.SQL_LOGINS 

sp_helplogins 'Rogerio'

sp_helplogins 'DESKTOP-BJNCNTD\marcio'

--Autorizacoes
--DEFININDO O USUARIO ROGERIO COMO DBCREATOR
ALTER SERVER ROLE [DBCREATOR] ADD MEMBER [ROGERIO]

-- EXCUINDO O USUARIO ROGERI COMO DBCREATOR
ALTER SERVER ROLE [DBCREATOR] DROP MEMBER [ROGERIO]

SELECT * FROM  SYS.fn_builtin_permissions ('')
WHERE class_desc = 'SERVER'

SELECT * FROM  SYS.fn_builtin_permissions ('')

SELECT * FROM  SYS.fn_builtin_permissions ('')
WHERE class_desc = 'DATABASE'

---------------------------------------------------

USE  ESQUINA_VENDAS
CREATE LOGIN FRANCISCO WITH PASSWORD = 'francisco@123'

--ASSOCIANDO O USUARIO AO LOGIN
CREATE USER FRANCISCO FOR LOGIN FRANCISCO

--EXCLUINDOO USUARIO
--DROP USER FRANCISCO

--COMO ADMINISTRADOR
USE ESQUINA_VENDAS

EXEC sp_addrolemember 'DB_DATAREADER','FRANCISCO'



------------------------------------------------------

USE ESQUINA_VENDAS

SELECT * FROM [TABELA DE VENDEDORES]

INSERT INTO [TABELA DE VENDEDORES] (MATRICULA,NOME,[PERCENTUAL COMISSAO],[DATA DE ADMISSAO],FERIAS,BAIRRO)
VALUES ('00242','Pedro Rocha',0.11,'2013-09-17',0,'Jardins')

--CONTINUACAO

USE  ESQUINA_VENDAS
--CRIACAO DO LOGIN
CREATE LOGIN FRANCISCO WITH PASSWORD = 'francisco@123'

--ASSOCIANDO O USUARIO AO LOGIN
CREATE USER FRANCISCO FOR LOGIN FRANCISCO

--EXCLUINDOO USUARIO
--DROP USER FRANCISCO

--COMO ADMINISTRADOR
USE ESQUINA_VENDAS

EXEC sp_addrolemember 'DB_DATAREADER','FRANCISCO'


-- USUARIOS FRANCISCO
USE ESQUINA_VENDAS

SELECT * FROM [TABELA DE VENDEDORES]

INSERT INTO [TABELA DE VENDEDORES] (MATRICULA,NOME,[PERCENTUAL COMISSAO],[DATA DE ADMISSAO],FERIAS,BAIRRO)
VALUES ('00242','Pedro Rocha',0.11,'2013-09-17',0,'Tijuca')

------- *********************** ----
-- CRIACAO DAS BASES DE DADOS
CREATE DATABASE BD_1
CREATE DATABASE BD_2
CREATE DATABASE BD_3
--DBAs
--DBA_BD_1  --> SENHA = qwe123
--DBA_BD_2  --> SENHA = qwe123
--DBA_BD_3  --> SENHA = qwe123

-- USUARIOS QUE TERAO ACESSO A NIVEL COMUM DE USUARIO
-- USER_1 --> SENHA = u@123 ---> BD_1
-- USER_2 --> SENHA = u@123 ---> BD_2
-- USER_3 --> SENHA = u@123 ---> BD_3, ESQUINA_VENDAS

--INFORMACOES DO BANCO DE DADOS
SP_HELPDB BD_1
SP_HELPDB BD_2
SP_HELPDB BD_3

--MUDANDO O DONO DAS BASES DE DADOS
--MUDANDO A BASE
USE master
ALTER AUTHORIZATION ON DATABASE::BD_1 TO SA

USE ESQUINA_VENDAS
-- O USUARIO ATUAL
SELECT SYSTEM_USER

--CONCEDENDO ACESSO AO USER_3
USE ESQUINA_VENDAS
GRANT SELECT TO USER_3 --> USUARIO

--TIRANDO O ACESSO (REVOGA)
REVOKE SELECT FROM USER_3 -->

--INFORMACOES DE LOGINS
SELECT * FROM SYS.SQL_LOGINS
EXEC sp_helplogins
EXEC sp_helplogins 'USER_1'
EXEC sp_helplogins 'DESKTOP-BJNCNTD\marcio'

--VERIFICANDO AS PERMISSOES
EXEC sp_helprotect @USERNAME= 'USER_3' 

---------------------------------------------
USE ESQUINA_VENDAS

CREATE LOGIN Kamila WITH PASSWORD = 'kamila@123'
CREATE USER Kamila FOR LOGIN Kamila
--CONCEDER PERMISSOES
GRANT SELECT, INSERT ON [TABELA DE VENDEDORES] TO Kamila
GRANT ALTER ON [TABELA DE VENDEDORES] TO Kamila
USE master
GRANT CONNECT SQL TO Kamila
USE ESQUINA_VENDAS
--ERRADO
--GRANT ALTER ON DATABASE [ESQUINA_VENDAS] TO Kamila
--CORRETO
GRANT ALTER ON DATABASE:: [ESQUINA_VENDAS] TO Kamila

GRANT SELECT ON [TABELA DE CLIENTES](CPF,NOME) TO Kamila
GRANT CREATE VIEW TO Kamila
GRANT CREATE TABLE TO Kamila
GRANT CREATE PROCEDURE TO Kamila
GRANT CREATE FUNCTION TO Kamila
GRANT EXECUTE ON [dbo].[CriarNotaFiscal] TO Kamila
GRANT SELECT  ON [dbo].[PesquisaEmbalagem] TO Kamila
--APLICANDO DE FORMA GERAL
GRANT SELECT TO Kamila
GRANT INSERT TO Kamila
GRANT UPDATE TO Kamila
GRANT DELETE TO Kamila
GRANT SELECT,INSERT, UPDATE, DELETE TO Kamila
GRANT SELECT ON [TABELA DE NOTAS FISCAIS] TO Kamila WITH GRANT OPTION
DENY EXECUTE ON [dbo].[CriarNotaFiscal] TO Kamila


EXEC sp_helprotect @USERNAME= 'Kamila' 

EXEC sp_helprotect 'TABELA DE VENDEDORES'

EXEC sp_helprotect 'TABELA DE CLIENTES' 


--TIRAR AS PERMISSOES, OU MELHOR REVOGAR AS PERMISSOES
REVOKE SELECT, INSERT ON [TABELA DE VENDEDORES] TO Kamila
REVOKE ALTER ON [TABELA DE VENDEDORES] TO Kamila

USE MASTER
REVOKE CONNECT SQL TO Kamila


--AULA 25 - PERFORMANCE

--SIMULANDO PROCESSO
USE ESQUINA_VENDAS

CREATE TABLE SOMA_QUANTIDADE (SOMA FLOAT)

DECLARE @MAX AS INT, @CONTADOR AS INT
SET @MAX = 3600
SET @CONTADOR = 1
WHILE @CONTADOR < @MAX
	BEGIN
		DECLARE @AUX FLOAT
		SELECT @AUX = SUM (QUANTIDADE) FROM [TABELA DE ITENS NOTAS FISCAIS]
		INSERT INTO SOMA_QUANTIDADE (SOMA) VALUES (@AUX)
		SET @CONTADOR = @CONTADOR + 1
		WAITFOR DELAY '00:00:02'
	END

--
-- VAMOS DIFICULTAR (PROCESSO MAIS PESADO)
USE ESQUINA_VENDAS

CREATE TABLE SOMA_QUANTIDADE_2 (SOMA FLOAT)

DECLARE @MAX AS INT, @CONTADOR AS INT
SET @MAX = 30000000
SET @CONTADOR = 1
INSERT INTO SOMA_QUANTIDADE_2(SOMA) VALUES (1)
WHILE @CONTADOR*2 < @MAX
	BEGIN
		
		INSERT INTO SOMA_QUANTIDADE_2 SELECT SOMA + @CONTADOR FROM SOMA_QUANTIDADE_2
		SET @CONTADOR = @CONTADOR *2 
	END
INSERT INTO SOMA_QUANTIDADE_2 
	SELECT SOMA + @CONTADOR FROM SOMA_QUANTIDADE_2 WHERE SOMA+@CONTADOR <= @MAX

SELECT SOMA, SOMA+1 AS 'SOMA + 1' FROM SOMA_QUANTIDADE_2
WHERE SOMA <= 30000000


-- DIMINUIR O BANCO 
USE ESQUINA_VENDAS
ALTER DATABASE ESQUINA_VENDAS SET RECOVERY SIMPLE
DBCC SHRINKDATABASE ('ESQUINA_VENDAS',NOTRUNCATE)
DBCC SHRINKDATABASE ('ESQUINA_VENDAS',TRUNCATEONLY)
ALTER DATABASE ESQUINA_VENDAS SET RECOVERY FULL


--SQL SERVER PROFILER

--CONSULTAS SIMPLES
USE ESQUINA_VENDAS
SELECT * FROM [TABELA DE NOTAS FISCAIS]
WHERE NUMERO = '100'

SELECT * FROM [TABELA DE NOTAS FISCAIS]

SELECT * FROM [TABELA DE CLIENTES]TC
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON TC.CPF = NF.CPF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO

--CONTINUA ...


--CRIANDO INDICE
USE ESQUINA_VENDAS

--CRIANDO TABELAS HEAP
CREATE TABLE TEST_INDICE1 (VALOR VARCHAR (10) NOT NULL)
CREATE TABLE TEST_INDICE2 (VALOR VARCHAR (10) NOT NULL)

DECLARE @MAX INT, @CONTADOR INT
SET @MAX = 3000000 --3 000 000 MILHOES
SET @CONTADOR = 1

INSERT INTO TEST_INDICE1 VALUES (1)
INSERT INTO TEST_INDICE2 VALUES (1)


WHILE @CONTADOR * 2 < @MAX
BEGIN
		INSERT INTO TEST_INDICE1 SELECT CONVERT(VARCHAR,VALOR + @CONTADOR) FROM TEST_INDICE1
		INSERT INTO TEST_INDICE2 SELECT CONVERT(VARCHAR,VALOR + @CONTADOR) FROM TEST_INDICE2
		SET @CONTADOR =   @CONTADOR *2
END

INSERT INTO TEST_INDICE1 SELECT CONVERT(VARCHAR,VALOR + @CONTADOR) FROM TEST_INDICE1
WHERE VALOR + @CONTADOR < = @MAX

INSERT INTO TEST_INDICE2 SELECT CONVERT(VARCHAR,VALOR + @CONTADOR) FROM TEST_INDICE2
WHERE VALOR + @CONTADOR < = @MAX

SELECT * FROM TEST_INDICE1
SELECT * FROM TEST_INDICE2

SELECT COUNT (*)FROM TEST_INDICE1
SELECT COUNT (*)FROM TEST_INDICE2

--CRIANDO INDICE
CREATE NONCLUSTERED INDEX IX_TEST_INDICE1 ON TEST_INDICE1 (VALOR)

SP_HELP 'TEST_INDICE1'
SP_HELP 'TEST_INDICE2'

SELECT * FROM SYS.indexes
WHERE object_id = OBJECT_ID ('TEST_INDICE1')

SELECT * FROM SYS.indexes
WHERE object_id = OBJECT_ID ('TEST_INDICE2')

SP_HELPINDEX [TEST_INDICE1]
SP_HELPINDEX [TEST_INDICE2]
SP_HELPINDEX [TABELA DE CLIENTES]
SP_HELPINDEX [TABELA DE ITENS NOTAS FISCAIS]

--DEPOIS DO INDICE, VAMOS TESTAR

SELECT * FROM TEST_INDICE1
WHERE VALOR = '1500000'


--EXECUTANDO ESTE PRIMEIRO 
SELECT * FROM TEST_INDICE2
WHERE VALOR = '1500000'


--INDICE CLUSTERED ORGANIZA FISICAMENTE AS PAGINAS DE DADOS
--INDICE NAO CLUSTERED VAI TER QUE CRIAR PAGINAS DE INDICE QUE VAO TER QUE APONTAR PARAS PAG. DE DADOS (MEMORIA)
--NO INDICE NAO CLUSTERED PODEMOS TER VARIOS INDICES
--USAR COM DISCERNIMENTO: NAO CRIE INDICES NAO CLUSTERED PARA MUITAS COLUNAS NUMA TABELA!!
-- É COMUM CRIARMOS INDICES NAO CLUSTERED EM COLUNAS QUE POSSUEM CONSTRAINT FK POIS ELAS SERAO USADAS EM JOINS




--INDICE PARTE 2
USE ESQUINA_VENDAS

CREATE TABLE TABELA_PK_INDEX
(
	COLUNA_1 VARCHAR (10) NOT NULL PRIMARY KEY,
	COLUNA_2 DATETIME
)

SP_HELPINDEX TABELA_PK_INDEX

SP_HELP 'TABELA_PK_INDEX'

SELECT * FROM SYS.indexes
WHERE object_id = OBJECT_ID ('TABELA_PK_INDEX')

INSERT INTO TABELA_PK_INDEX VALUES ('A',GETDATE())

SELECT * FROM TABELA_PK_INDEX

CREATE TABLE TABELA_CLUSTERED_INDEX



INSERT INTO TABELA_PK_INDEX
VALUES ('A', GETDATE())

CREATE TABLE TABELA_CLUSTERED_INDEX
(
	ID INT,
	NOME VARCHAR (10)

)

SP_HELPINDEX TABELA_CLUSTERED_INDEX

CREATE CLUSTERED INDEX IX_ID_CLUSTERED
ON TABELA_CLUSTERED_INDEX (ID)

SP_HELPINDEX TABELA_CLUSTERED_INDEX

INSERT INTO TABELA_CLUSTERED_INDEX VALUES (1,'A')
INSERT INTO TABELA_CLUSTERED_INDEX VALUES (2,'B')
INSERT INTO TABELA_CLUSTERED_INDEX VALUES (3,'C')
INSERT INTO TABELA_CLUSTERED_INDEX VALUES (4,'D')
INSERT INTO TABELA_CLUSTERED_INDEX VALUES (5,'E')

SELECT * FROM TABELA_CLUSTERED_INDEX

INSERT INTO TABELA_CLUSTERED_INDEX VALUES (1,'F')

SELECT * FROM TABELA_CLUSTERED_INDEX

--REMOVENDO O INDEX
DROP INDEX TABELA_CLUSTERED_INDEX.IX_ID_CLUSTERED
--TESTANDO A ORGANIZACAO DO INDICE
INSERT INTO TABELA_CLUSTERED_INDEX VALUES (1,'F')
SELECT * FROM TABELA_CLUSTERED_INDEX

CREATE TABLE TABELA_NONCLUSTERED_INDEX
(
	ID INT,
	PRODUTO VARCHAR (20)

)

CREATE NONCLUSTERED  INDEX IX_ID_NONCLUSTERED
ON TABELA_NONCLUSTERED_INDEX (ID)


SP_HELPINDEX TABELA_NONCLUSTERED_INDEX


SELECT * FROM SYS.indexes
WHERE object_id = OBJECT_ID('TABELA_NONCLUSTERED_INDEX')


INSERT INTO TABELA_NONCLUSTERED_INDEX VALUES(1,'PROD A')
INSERT INTO TABELA_NONCLUSTERED_INDEX VALUES(2,'PROD B')
INSERT INTO TABELA_NONCLUSTERED_INDEX VALUES(3,'PROD C')
INSERT INTO TABELA_NONCLUSTERED_INDEX VALUES(4,'PROD D')
INSERT INTO TABELA_NONCLUSTERED_INDEX VALUES(5,'PROD E')

SELECT * FROM TABELA_NONCLUSTERED_INDEX

INSERT INTO TABELA_NONCLUSTERED_INDEX VALUES(1,'PROD A')

--APAGANDO O INDICE
DROP INDEX TABELA_NONCLUSTERED_INDEX.IX_ID_NONCLUSTERED

SELECT * FROM SYS.indexes
WHERE object_id = OBJECT_ID('TABELA_NONCLUSTERED_INDEX')


--CRIANDO COM UNIQUE PARA GARANTIR NAO VALOR DUPICADO
CREATE UNIQUE NONCLUSTERED INDEX IX_ID_NONCLUSTERED_UNIQUE
ON TABELA_NONCLUSTERED_INDEX(ID)

SELECT * FROM TABELA_NONCLUSTERED_INDEX

DELETE FROM TABELA_NONCLUSTERED_INDEX
WHERE ID = 1


INSERT INTO TABELA_NONCLUSTERED_INDEX VALUES(1,'PROD A')

SP_HELPINDEX TABELA_NONCLUSTERED_INDEX

DROP INDEX TABELA_NONCLUSTERED_INDEX.IX_ID_NONCLUSTERED_UNIQUE

--INDICE COMPOSTO
CREATE NONCLUSTERED INDEX IX_COMPOSTO
ON TABELA_NONCLUSTERED_INDEX(ID,PRODUTO)

SP_HELPINDEX TABELA_NONCLUSTERED_INDEX


CREATE TABLE TABELA_INDEX_TRUE
(
	ID INT ,
	CLIENTE VARCHAR (20) NOT NULL,
	[CODIGO DO PRODUTO] VARCHAR(10) NOT NULL,

	CONSTRAINT PK_ID PRIMARY KEY(ID),
	
	CONSTRAINT  FK_TABELA_INDEX_TRUE_TABELA_DE_PRODUTOS FOREIGN KEY([CODIGO DO PRODUTO])  
	REFERENCES [TABELA DE PRODUTOS] ([CODIGO DO PRODUTO]),

	INDEX IX_CODIGO_DO_PRODUTO  NONCLUSTERED([CODIGO DO PRODUTO])
	
)

SP_HELPINDEX TABELA_INDEX_TRUE

SELECT * FROM SYS.indexes
WHERE object_id = OBJECT_ID('TABELA_INDEX_TRUE')


--EXTENDED EVENTS

-- CONSULTA DA MICROSOFT
SELECT
     obj1.name as [XEvent-name],
     col2.name as [XEvent-column],
     obj1.description as [Descr-name],
     col2.description as [Descr-column]
  FROM
               sys.dm_xe_objects        as obj1
      JOIN sys.dm_xe_object_columns as col2 on col2.object_name = obj1.name
  ORDER BY
    obj1.name,
    col2.name

-- AULA 26 - PLANO DE CONSULTA

USE ESQUINA_VENDAS

--SELECT SEM INDICE
SELECT * FROM TEST_INDICE2
WHERE VALOR = '10001'

--SELECT COM INDICE
SELECT * FROM TEST_INDICE1
WHERE VALOR = '10001'


SELECT TC.CPF,TC.NOME,NF.DATA, SUM (INF.QUANTIDADE) FROM [TABELA DE CLIENTES]TC
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON TC.CPF = NF.CPF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON INF.NUMERO = NF.NUMERO
GROUP BY TC.CPF,TC.NOME,NF.DATA

CREATE TABLE TABELA_HEAP
(	
	A INT NOT NULL,
	B INT NOT NULL,
	C INT NOT NULL,
	D INT NOT NULL,
	E INT NOT NULL,
	F INT NOT NULL
)

INSERT INTO TABELA_HEAP (A,B,C,D,E,F)
VALUES ([dbo].[NumeroAleatorio](1,100),[dbo].[NumeroAleatorio](1,100),[dbo].[NumeroAleatorio](1,100),[dbo].[NumeroAleatorio](1,100),
[dbo].[NumeroAleatorio](1,100),[dbo].[NumeroAleatorio](1,100))
GO 10

SELECT * FROM TABELA_HEAP

SELECT B,C FROM TABELA_HEAP
WHERE B=78 AND C=45

CREATE NONCLUSTERED INDEX IX_TABELA_HEAP ON TABELA_HEAP(A)

SELECT B FROM TABELA_HEAP
WHERE B=1

SELECT A FROM TABELA_HEAP
WHERE A=1

CREATE INDEX IX_TABELA_HEAP_BC ON TABELA_HEAP(B,C)

SELECT B,C FROM TABELA_HEAP
WHERE B=1 AND C=1

SELECT B FROM TABELA_HEAP
WHERE B=1 AND C=1

SELECT A FROM TABELA_HEAP
WHERE B=1 AND C=1
--TABLE SCAN
SELECT A,B FROM TABELA_HEAP
WHERE B=1 AND C=1

SELECT B,C FROM TABELA_HEAP
WHERE B=1 AND C=1

-- A UNICA DEFERENCA E QUE AQUI NA CHAVE BALENCEADA VAMOS DESCER PELO INDICE D
-- MAS NO ULTIMO NIVEL DA CHAVE BALANCEADA VAMOS TER E
CREATE INDEX IX_TABELA_HEAP_D ON TABELA_HEAP(D) INCLUDE (E)

SELECT D,E FROM TABELA_HEAP
WHERE D=1 AND E=1 

SELECT E,D FROM TABELA_HEAP
WHERE D=1 AND E=1 

SELECT E FROM TABELA_HEAP
WHERE D=1 AND E=1 

SELECT A FROM TABELA_HEAP
WHERE D=1 AND E=1 

CREATE UNIQUE INDEX IX_TABELA_HEAP_F  ON TABELA_HEAP(F)

SELECT F FROM TABELA_HEAP
WHERE F=1

SELECT A FROM TABELA_HEAP
WHERE F=1


CREATE TABLE TABELA_CLUSTERIZADA
(
	A INT NOT NULL,
	B INT NOT NULL,
	C INT NOT NULL,
	D INT NOT NULL,
	E INT NOT NULL,
	F INT NOT NULL
)

INSERT INTO TABELA_CLUSTERIZADA (A,B,C,D,E,F)
VALUES ([dbo].[NumeroAleatorio](1,100),[dbo].[NumeroAleatorio](1,100),[dbo].[NumeroAleatorio](1,100),[dbo].[NumeroAleatorio](1,100),
[dbo].[NumeroAleatorio](1,100),[dbo].[NumeroAleatorio](1,100))
GO 10

CREATE UNIQUE CLUSTERED INDEX IX_T_CLUSTERIZADA_A ON TABELA_CLUSTERIZADA (A)

SELECT A FROM TABELA_CLUSTERIZADA
WHERE B=68 AND C=55


SELECT A FROM TABELA_CLUSTERIZADA
WHERE B=68 AND C=55

SELECT * FROM TABELA_CLUSTERIZADA
WHERE A=50

SELECT B,C FROM TABELA_CLUSTERIZADA
WHERE B=50 AND C = 50


--O SQL SERVER SEMPRE PROCURA O INDICE MAIS RAPIDO

CREATE INDEX IX_T_CLUSTERIZADA_B ON TABELA_CLUSTERIZADA (B,C)

SELECT B,C FROM TABELA_CLUSTERIZADA
WHERE B=50 AND C = 50



CREATE INDEX IX_T_CLUSTERIZADA_D ON TABELA_CLUSTERIZADA (D) INCLUDE (E)


SELECT D,E FROM TABELA_CLUSTERIZADA
WHERE D=2 AND E=2


--PODEMOS TER DOIS INDICES UNIQUE NA MESMA TABELA
CREATE UNIQUE INDEX IX_T_CLUSTERIZADA ON TABELA_CLUSTERIZADA(F)


SELECT * FROM TABELA_CLUSTERIZADA
WHERE F = 1



SP_HELPINDEX TABELA_CLUSTERIZADA

--JOINS

CREATE TABLE T_HEAP_A
(
	A INT NOT NULL,
	B INT NOT NULL,
	C INT NOT NULL,
	D INT NOT NULL,
	E INT NOT NULL,
	F INT NOT NULL,

)


CREATE TABLE T_HEAP_B
(
	A INT NOT NULL,
	B INT NOT NULL,
	C INT NOT NULL,
	D INT NOT NULL,
	E INT NOT NULL,
	F INT NOT NULL,

)

INSERT INTO T_HEAP_A (A,B,C,D,E,F)
VALUES (DBO.NumeroAleatorio(1,100),DBO.NumeroAleatorio(1,100),DBO.NumeroAleatorio(1,100),DBO.NumeroAleatorio(1,100),DBO.NumeroAleatorio(1,100),DBO.NumeroAleatorio(1,100))
GO 10

INSERT INTO T_HEAP_B (A,B,C,D,E,F)
VALUES (DBO.NumeroAleatorio(1,100),DBO.NumeroAleatorio(1,100),DBO.NumeroAleatorio(1,100),DBO.NumeroAleatorio(1,100),DBO.NumeroAleatorio(1,100),DBO.NumeroAleatorio(1,100))
GO 10


SELECT THA.A, THB.B FROM T_HEAP_A THA
INNER JOIN T_HEAP_B THB
ON THA.A = THB.A

CREATE INDEX IX_T_HEAP_A ON T_HEAP_A (A)

SELECT THA.A, THB.B FROM T_HEAP_A THA
INNER JOIN T_HEAP_B THB
ON THA.A = THB.A


SELECT THA.A, THB.B FROM T_HEAP_A THA
INNER JOIN T_HEAP_B THB
ON THA.A = THB.A


DROP TABLE T_HEAP_A
DROP TABLE T_HEAP_B



--SUGESTAO DE INDICE

--MITO: A ORDEM DOS JOINS AFETAM NA PERFOMANCE DA CONSULTA
SELECT TC.CPF, NF.NUMERO, INF.QUANTIDADE FROM [TABELA DE CLIENTES]TC
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON TC.CPF = NF.CPF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON NF.NUMERO = INF.NUMERO


SELECT TC.CPF, NF.NUMERO, INF.QUANTIDADE FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
INNER JOIN [TABELA DE CLIENTES]TC
ON TC.CPF = NF.CPF



-- CONSULTA PRA LÁ DE ESPECIAL PRA VCS 

SELECT
    sys.objects.name,
    (avg_total_user_cost * avg_user_impact) * (user_seeks + user_scans) AS Impact,
    'CREATE NONCLUSTERED INDEX ix_IndexName ON ' + sys.objects.name COLLATE DATABASE_DEFAULT + ' ( ' + ISNULL(mid.equality_columns, '') + CASE
        WHEN mid.inequality_columns IS NULL THEN ''
        ELSE CASE
                WHEN mid.equality_columns IS NULL THEN ''
                ELSE ','
            END + mid.inequality_columns
    END + ' ) ' + CASE
        WHEN mid.included_columns IS NULL THEN ''
        ELSE 'INCLUDE (' + mid.included_columns + ')'
    END + ';' AS CreateIndexStatement,
    mid.equality_columns,
    mid.inequality_columns,
    mid.included_columns
FROM sys.dm_db_missing_index_group_stats AS migs
INNER JOIN sys.dm_db_missing_index_groups AS mig
    ON migs.group_handle = mig.index_group_handle
INNER JOIN sys.dm_db_missing_index_details AS mid
    ON mig.index_handle = mid.index_handle
    AND mid.database_id = DB_ID()
INNER JOIN sys.objects WITH (NOLOCK)
    ON mid.OBJECT_ID = sys.objects.OBJECT_ID
WHERE (
    migs.group_handle IN (
        SELECT TOP (500) group_handle
        FROM sys.dm_db_missing_index_group_stats WITH (NOLOCK)
        ORDER BY (avg_total_user_cost * avg_user_impact) * (user_seeks + user_scans) DESC
    )
)
AND OBJECTPROPERTY(sys.objects.OBJECT_ID, 'isusertable') = 1
ORDER BY 2 DESC, 3 DESC




--MOSTRA OS INDICES QUE NAO ESTAO SENDO USADOS 
	SELECT o.name, indexname=i.name, i.index_id 
, reads=user_seeks + user_scans + user_lookups 
, writes = user_updates 
, rows = (SELECT SUM(p.rows) FROM sys.partitions p WHERE p.index_id = s.index_id AND s.object_id = p.object_id)
, CASE
 WHEN s.user_updates < 1 THEN 100
 ELSE 1.00 * (s.user_seeks + s.user_scans + s.user_lookups) / s.user_updates
 END AS reads_per_write
, 'DROP INDEX ' + QUOTENAME(i.name) 
+ ' ON ' + QUOTENAME(c.name) + '.' + QUOTENAME(OBJECT_NAME(s.object_id)) as 'drop statement'
FROM sys.dm_db_index_usage_stats s 
INNER JOIN sys.indexes i ON i.index_id = s.index_id AND s.object_id = i.object_id 
INNER JOIN sys.objects o on s.object_id = o.object_id
INNER JOIN sys.schemas c on o.schema_id = c.schema_id
WHERE OBJECTPROPERTY(s.object_id,'IsUserTable') = 1
AND s.database_id = DB_ID() 
AND i.type_desc = 'nonclustered'
AND i.is_primary_key = 0
AND i.is_unique_constraint = 0
AND (SELECT SUM(p.rows) FROM sys.partitions p WHERE p.index_id = s.index_id AND s.object_id = p.object_id) > 10000
ORDER BY reads



------------------------------------------------------------
--RESPOSTA DOS DAS QUESTÕES DO FORMS SOBRE CURSORES

-- *********  DESAFIO ******* ---

--1 - Crie um script usando um cursor para achar o 
--valor total de todos os créditos de todos os clientes.                                                                                                      
--CONSULTA CANDIDATA
SELECT [LIMITE DE CREDITO] FROM [TABELA DE CLIENTES]

DECLARE @LIMITE_CREDITO FLOAT 
DECLARE @LIMITECREDITO_TOTAL FLOAT 
DECLARE CURSOR1 CURSOR FOR SELECT [LIMITE DE CREDITO] FROM [TABELA DE CLIENTES]

SET @LIMITECREDITO_TOTAL = 0

OPEN CURSOR1
FETCH NEXT FROM  CURSOR1 INTO @LIMITE_CREDITO


WHILE @@FETCH_STATUS = 0
BEGIN
--@LIMITE_CREDITO= 0 + 120000,00 + 170000,00 + 100000,00 + ... 90000,00
SET  @LIMITECREDITO_TOTAL = @LIMITECREDITO_TOTAL + @LIMITE_CREDITO
FETCH NEXT FROM  CURSOR1 INTO @LIMITE_CREDITO
END
-- NO FINAL DO CURSOR @@FETCH_STATUS = 1
CLOSE CURSOR1
DEALLOCATE CURSOR1

PRINT CONVERT (DECIMAL(11,2) ,@LIMITECREDITO_TOTAL)




------------------------------------------------------------

--2 - Crie um script usando um cursor para achar o valor 
--total do faturamento para um mês e um ano.

--ANALISE DA CONSULTA 
SELECT NF.DATA, SUM (INF.QUANTIDADE*INF.PRECO) AS 'FATURAMENTO DIARIO' FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
WHERE MONTH (NF.DATA) = 1 AND YEAR(NF.DATA) = 2017
GROUP BY NF.DATA
ORDER BY NF.DATA ASC

-- SEGUNDA ANALISE
SELECT INF.QUANTIDADE,INF.PRECO  FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
WHERE MONTH (NF.DATA) = 1 AND YEAR(NF.DATA) = 2017



DECLARE @QUANTIDADE INT
DECLARE @PRECO FLOAT
DECLARE @FATURAMENTO_ACUM FLOAT
DECLARE @MES INT
DECLARE @ANO INT

SET @MES = 1
SET @ANO = 2017
SET @FATURAMENTO_ACUM = 0

DECLARE CURSOR1 CURSOR FOR SELECT INF.QUANTIDADE,INF.PRECO  FROM [TABELA DE ITENS NOTAS FISCAIS]INF
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON INF.NUMERO = NF.NUMERO
WHERE MONTH (NF.DATA) = @MES AND YEAR(NF.DATA) = @ANO
OPEN CURSOR1
FETCH NEXT FROM CURSOR1 INTO @QUANTIDADE,@PRECO

WHILE @@FETCH_STATUS = 0
BEGIN
	
	SET @FATURAMENTO_ACUM = @FATURAMENTO_ACUM + (@QUANTIDADE * @PRECO)
	


	FETCH NEXT FROM  CURSOR1 INTO @QUANTIDADE,@PRECO
END
CLOSE CURSOR1
DEALLOCATE CURSOR1

PRINT CONVERT (DECIMAL (9,2),@FATURAMENTO_ACUM)




--AULA DE ONTEM  E VAMOS CONTINUAR DE ONDE PARAMOS 

USE ESQUINA_VENDAS

--SELECT SEM INDICE
SELECT * FROM TEST_INDICE2
WHERE VALOR = '10001'

--SELECT COM INDICE
SELECT * FROM TEST_INDICE1
WHERE VALOR = '10001'


SELECT TC.CPF,TC.NOME,NF.DATA, SUM (INF.QUANTIDADE) FROM [TABELA DE CLIENTES]TC
INNER JOIN [TABELA DE NOTAS FISCAIS]NF
ON TC.CPF = NF.CPF
INNER JOIN [TABELA DE ITENS NOTAS FISCAIS]INF
ON INF.NUMERO = NF.NUMERO
GROUP BY TC.CPF,TC.NOME,NF.DATA

CREATE TABLE TABELA_HEAP
(	
	A INT NOT NULL,
	B INT NOT NULL,
	C INT NOT NULL,
	D INT NOT NULL,
	E INT NOT NULL,
	F INT NOT NULL
)

INSERT INTO TABELA_HEAP (A,B,C,D,E,F)
VALUES ([dbo].[NumeroAleatorio](1,100),[dbo].[NumeroAleatorio](1,100),[dbo].[NumeroAleatorio](1,100),[dbo].[NumeroAleatorio](1,100),
[dbo].[NumeroAleatorio](1,100),[dbo].[NumeroAleatorio](1,100))
GO 10

SELECT * FROM TABELA_HEAP

SELECT B,C FROM TABELA_HEAP
WHERE B=78 AND C=45

CREATE NONCLUSTERED INDEX IX_TABELA_HEAP ON TABELA_HEAP(A)

SELECT B FROM TABELA_HEAP
WHERE B=1

SELECT A FROM TABELA_HEAP
WHERE A=1

CREATE INDEX IX_TABELA_HEAP_BC ON TABELA_HEAP(B,C)

SELECT B,C FROM TABELA_HEAP
WHERE B=1 AND C=1

SELECT B FROM TABELA_HEAP
WHERE B=1 AND C=1

SELECT A FROM TABELA_HEAP
WHERE B=1 AND C=1
--TABLE SCAN
SELECT A,B FROM TABELA_HEAP
WHERE B=1 AND C=1

SELECT B,C FROM TABELA_HEAP
WHERE B=1 AND C=1

-- A UNICA DEFERENCA E QUE AQUI NA CHAVE BALENCEADA VAMOS DESCER PELO INDICE D
-- MAS NO ULTIMO NIVEL DA CHAVE BALANCEADA VAMOS TER E
CREATE INDEX IX_TABELA_HEAP_D ON TABELA_HEAP(D) INCLUDE (E)

SELECT D,E FROM TABELA_HEAP
WHERE D=1 AND E=1 

SELECT E,D FROM TABELA_HEAP
WHERE D=1 AND E=1 

SELECT E FROM TABELA_HEAP
WHERE D=1 AND E=1 

SELECT A FROM TABELA_HEAP
WHERE D=1 AND E=1 

CREATE UNIQUE INDEX IX_TABELA_HEAP_F  ON TABELA_HEAP(F)

SELECT F FROM TABELA_HEAP
WHERE F=1

SELECT A FROM TABELA_HEAP
WHERE F=1


CREATE TABLE TABELA_CLUSTERIZADA
(
	A INT NOT NULL,
	B INT NOT NULL,
	C INT NOT NULL,
	D INT NOT NULL,
	E INT NOT NULL,
	F INT NOT NULL
)

INSERT INTO TABELA_CLUSTERIZADA (A,B,C,D,E,F)
VALUES ([dbo].[NumeroAleatorio](1,100),[dbo].[NumeroAleatorio](1,100),[dbo].[NumeroAleatorio](1,100),[dbo].[NumeroAleatorio](1,100),
[dbo].[NumeroAleatorio](1,100),[dbo].[NumeroAleatorio](1,100))
GO 10

CREATE UNIQUE CLUSTERED INDEX IX_T_CLUSTERIZADA_A ON TABELA_CLUSTERIZADA (A)

SELECT A FROM TABELA_CLUSTERIZADA
WHERE B=68 AND C=55


--CONSULTA PRA LÁ DE ESPECIAL PRA VOCES
SELECT
    sys.objects.name,
    (avg_total_user_cost * avg_user_impact) * (user_seeks + user_scans) AS Impact,
    'CREATE NONCLUSTERED INDEX ix_IndexName ON ' + sys.objects.name COLLATE DATABASE_DEFAULT + ' ( ' + ISNULL(mid.equality_columns, '') + CASE
        WHEN mid.inequality_columns IS NULL THEN ''
        ELSE CASE
                WHEN mid.equality_columns IS NULL THEN ''
                ELSE ','
            END + mid.inequality_columns
    END + ' ) ' + CASE
        WHEN mid.included_columns IS NULL THEN ''
        ELSE 'INCLUDE (' + mid.included_columns + ')'
    END + ';' AS CreateIndexStatement,
    mid.equality_columns,
    mid.inequality_columns,
    mid.included_columns
FROM sys.dm_db_missing_index_group_stats AS migs
INNER JOIN sys.dm_db_missing_index_groups AS mig
    ON migs.group_handle = mig.index_group_handle
INNER JOIN sys.dm_db_missing_index_details AS mid
    ON mig.index_handle = mid.index_handle
    AND mid.database_id = DB_ID()
INNER JOIN sys.objects WITH (NOLOCK)
    ON mid.OBJECT_ID = sys.objects.OBJECT_ID
WHERE (
    migs.group_handle IN (
        SELECT TOP (500) group_handle
        FROM sys.dm_db_missing_index_group_stats WITH (NOLOCK)
        ORDER BY (avg_total_user_cost * avg_user_impact) * (user_seeks + user_scans) DESC
    )
)
AND OBJECTPROPERTY(sys.objects.OBJECT_ID, 'isusertable') = 1
ORDER BY 2 DESC, 3 DESC


--MOSTRA OS INDICES QUE NAO ESTAO SENDO USADOS 
	SELECT o.name, indexname=i.name, i.index_id 
, reads=user_seeks + user_scans + user_lookups 
, writes = user_updates 
, rows = (SELECT SUM(p.rows) FROM sys.partitions p WHERE p.index_id = s.index_id AND s.object_id = p.object_id)
, CASE
 WHEN s.user_updates < 1 THEN 100
 ELSE 1.00 * (s.user_seeks + s.user_scans + s.user_lookups) / s.user_updates
 END AS reads_per_write
, 'DROP INDEX ' + QUOTENAME(i.name) 
+ ' ON ' + QUOTENAME(c.name) + '.' + QUOTENAME(OBJECT_NAME(s.object_id)) as 'drop statement'
FROM sys.dm_db_index_usage_stats s 
INNER JOIN sys.indexes i ON i.index_id = s.index_id AND s.object_id = i.object_id 
INNER JOIN sys.objects o on s.object_id = o.object_id
INNER JOIN sys.schemas c on o.schema_id = c.schema_id
WHERE OBJECTPROPERTY(s.object_id,'IsUserTable') = 1
AND s.database_id = DB_ID() 
AND i.type_desc = 'nonclustered'
AND i.is_primary_key = 0
AND i.is_unique_constraint = 0
AND (SELECT SUM(p.rows) FROM sys.partitions p WHERE p.index_id = s.index_id AND s.object_id = p.object_id) > 10000
ORDER BY reads